[{"path":"index.html","id":"введение","chapter":"Введение","heading":"Введение","text":"","code":""},{"path":"index.html","id":"о-курсе","chapter":"Введение","heading":"О курсе","text":"Моё знакомство с языком R состоялось в 2016 году. На тот момент я планировал его использовать для сбора данных по API из различных рекламных платформ. Для части из этих платформ я нашел готовые решения в видео пакетов, но для некоторых, менее известных рекламных площадок готов пакетов не оказалось. И тогда я попробовал разобраться самостоятельно с тем, как устроены R пакеты. На тот момент я не нашел полноценного гайда, и создавал пакеты методом тыка, используя встроенный в базовую комплектацию R функционал, вроде функции package.skeleton(), далее я руками правил все .Rmd файлы, из которых генерируется докуметация к функциям, и вообще делал в ходе разработки пакетов очень много лишней работы.На данный момент в главном репозитории хранения R пакетов - CRAN уже опубликовано 14 разработанных мной пакетов, за годы разработки пакетов я уже набил довлльно много шишек, и ознакомился с замечательной книгой Хедли Викхема \"R Packages (2e)\", которая и легла в основу этого курса. Тем не менее данный курс не является полным повторением книги, некоторые главы мы рассматривать не будем, но и в ходе курса будут рассмотрены темы, которые Хедли не упоминал в своей книге.Разработка пакетов один из лучших способов повысить свои навыки написания кода на R, и углуюиться в его изучение. Данный курс поможет вам пошагово освоить процесс разработки собственных пакетов, написать свой первый пакет вы сможете посмотрев первый урок курса. К тому же таким образом вы сможете внести свой вклад в развитие языка поделившись своими наработками, упакованными в R пакет.Добро пожаловать на курс \"Разработка пакетов на языке R\", и успехов в его прохождении!","code":""},{"path":"index.html","id":"для-кого-этот-курс","chapter":"Введение","heading":"Для кого этот курс","text":"Данный курс я не могу рекомендовать новичкам. Заниматься разработкой пакетов лучше имея за плечами определённый опыт написания кода на R. Поэтому не стоит начинать изучения R с данного курса, ниже я дам небольшую подборку подготовительных курсов, изучив которые можно попробовать себя в разработке пакетов.","code":""},{"path":"index.html","id":"по-поводу-поддержки-обучающихся-на-данном-курса","chapter":"Введение","heading":"По поводу поддержки обучающихся на данном курса","text":"Важно! Поддержки учащихся на этом курсе со стороны автора нет. Я не занимаюсь частными консультациями, тем более не консультирую студентов бесплатных курсов. Поэтому не имеет никакого смысла писать мне в личку или на почту просьбы помочь с прохождением этого, или любого другого моего бесплатного курса. Если вы столкнулись с трудностями при прохождении курса и вам нужна помощь, то все вопросы можно адресовать в следующие telegram чаты:R (язык программирования)Горячая линия RОтдельного чата со студентами непосредственно этого курса не существует, но при желании вы самостоятельно можете его организовать, и я с радостью добавлю на него ссылку.К тому же, если у вас есть вопросы по одной из лекций курса, вы можете задавать его под видео лекции на YouTube, это приветствуется, и на такие комментарии я с радостью отвечу.Буду рад любой конструктивной критике, и предложениям по улучшению курса \"разработка пакетов на языке R\", направлять их можно мне на почту selesnow@gmail.com. Если вы хотите выразить благодарность мне за курс, то в конце раздела описано как это можно сделать.","code":""},{"path":"index.html","id":"рекомендации-по-прохождению-курса","chapter":"Введение","heading":"Рекомендации по прохождению курса","text":"Данный курс состоит из 14 видео лекций общей длительность более 6 часов. В конце каждого урока вы найдёте небольшой тест или задание для закрепления материала лекции. Прохождение тестов не является обязательным, тем не менее я крайне советую пройти тест после просмотра лекции. Тесты помогут акцентировать ваше внимание на наиболее важных моментах урока, и проверить как вы усвоили материал.Так же каждый урок сожержит конспект лекции. Для достижения максимльного эффекта от обучения, и дальнейшего использования полученных знаний придерживайтесь следующего алгоритма:Посмотрите полное видео лекции.Пройдите тест или выполните задание к уроку.В дальнейшем при разработке пакета ищите нужную информацию в конспекте лекции, или найдите в тайм кодах время нужнй части лекции и пересмотрите его.Таким образом вы пройдёте весь материал курса, и сможете быстро в дальнейшем пересмотреть отдельно нужную вам его часть при разработке ваших пакетов.","code":""},{"path":"index.html","id":"об-авторе","chapter":"Введение","heading":"Об авторе","text":"Меня зовут Алексей Селезнёв, с 2008 года я являюсь практикующим аналитиком. На данный момент основной моей деятельностью является развитие отдела аналитики в агентстве интернет-маркетинга Netpeak.\nМною были разработаны такие R пакеты как: rgoogleads, rfacebookstat, timeperiodsR и некоторые другие. На данный момент написанные мной пакеты только с CRAN были установленны более 200 000 раз.Также я являюсь автором некоторых других курсов по R (ссылки на них приведу ниже), лектором академии Web Promo Experts и соавтором курса \"Веб-аналитика Pro\".Веду свой авторский Telegram и YouTube канал R4marketing. Буду рад видеть вас в рядах подписчиков.Периодически публикую статью на различных интернет медиа, зачастую это Хабр и Netpeak Journal.Неоднократно выступал на профильных конференциях по аналитике и интернет маркетингу, среди которых Матемаркетинг, GoAnalytics, Analyze, eCommerce, 8P и прочие.","code":""},{"path":"index.html","id":"другие-курсы-автора","chapter":"Введение","heading":"Другие курсы автора","text":"Как я уже писал выше, помимо курса \"Разработка пакетов на языке R\" у меня есть ряд других бесплатных курсов:Язык R для интернет маркетинга, для начинающих, требуется бесплатная регистрацияЯзык R для пользователей Excel, для начинающихВведение в dplyr 1.0.0, средней уровень сложностиЦиклы и функционалы в языке R, средней уровень сложностиРазработка telegram ботов на языке R, высокий уровень сложности","code":""},{"path":"index.html","id":"каналы-автора","chapter":"Введение","heading":"Каналы автора","text":"Если вы интересуетесь языком R, применяете его в работе, или планируете изучать, то думаю вам будут интересны мои каналы, о которых я писал выше. Буду рад видеть вас среди подписчиков:Telegram канал R4marketingYoutube канал R4marketing","code":""},{"path":"index.html","id":"программа-курса","chapter":"Введение","heading":"Программа курса","text":"В данный момент курс \"разработка пакетов на языке R\" назодится в активной стадии разработки, поэтому программа постоянно расширяется, следить за обновлениями курса можно на страницк Новости курса. Ниже представлена актуальная программа на текущий момент:Обзор рабочего процесса разработки пакетаНастройка системы и интеграция с GitHubРекомендации по организации R кодаДобавление данных в пакетDESCRIPTION - Метаданные пакетаNAMESPACE - Зависимости пакетаРазработка юнит-тестов к функциям пакета (пакет testthat)Написание документации к функциям пакетаВиньетки и прочая опциональная документация пакетаРазработка сайта пакета (пакет pkgdown)Публикация в CRANРазработка пакета обёртки над API (пакет httr2)Разработка пакета обёртки для Google API (пакет gargle)Как создать коллекцию пакетовДата обновления курса: 16.10.2023","code":""},{"path":"index.html","id":"благодарности-автору","chapter":"Введение","heading":"Благодарности автору","text":"Курс, и все сопутствующие материалы предоставляются бесплатно, но если у вас есть желание отблагодарить автора за этот видео курс вы можете перечислить любую произвольную сумму на этой странице.Так же вы можете поделиться ссылкой на курс у себя в соц сетях, за что я тоже буду вам благдарен!facebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":""},{"path":"вводное-слово.html","id":"вводное-слово","chapter":"Вводное слово","heading":"Вводное слово","text":"facebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":""},{"path":"обзор-рабочего-процесса-разработки-пакета.html","id":"обзор-рабочего-процесса-разработки-пакета","chapter":"Урок 1 Обзор рабочего процесса разработки пакета","heading":"Урок 1 Обзор рабочего процесса разработки пакета","text":"В этом уроке мы поверхностно разберём весь процесс разработки пакета.Если вы работаете на Windows предварительно устновите Rtools.Данный урок основан на главе \"Whole Game\" книги \"R Packages (2e)\", под авторством Хедли Викхема и Дженни Брайан.","code":""},{"path":"обзор-рабочего-процесса-разработки-пакета.html","id":"видео","chapter":"Урок 1 Обзор рабочего процесса разработки пакета","heading":"1.1 Видео","text":"","code":""},{"path":"обзор-рабочего-процесса-разработки-пакета.html","id":"тайм-коды","chapter":"Урок 1 Обзор рабочего процесса разработки пакета","heading":"1.1.1 Тайм коды","text":"00:00 Вступление\n00:43 Как создать проект пакета\n01:50 Структура проекта пакета\n02:47 Добавляем проекту контроль версий\n03:14 Как добавить функцию в свой пакет\n04:17 Как загрузить текущий пакет (load_all())\n05:05 Как запустить проверку пакета (check())\n05:56 Файл DESCRIPTION\n06:52 Добавляем лицензию пакету\n07:08 Добавляем документацию к функциям пакета\n09:47 Файл NAMESPACE\n10:10 Добавляем юнит тесты для функций пакета\n13:34 Как использовать в своём пакете функции из других пакетов\n16:46 Обзор всего рабочего процесса\n19:03 Заключение","code":""},{"path":"обзор-рабочего-процесса-разработки-пакета.html","id":"презентация","chapter":"Урок 1 Обзор рабочего процесса разработки пакета","heading":"1.2 Презентация","text":"","code":""},{"path":"обзор-рабочего-процесса-разработки-пакета.html","id":"конспект","chapter":"Урок 1 Обзор рабочего процесса разработки пакета","heading":"1.3 Конспект","text":"","code":""},{"path":"обзор-рабочего-процесса-разработки-пакета.html","id":"вспомогательные-пакеты","chapter":"Урок 1 Обзор рабочего процесса разработки пакета","heading":"1.3.1 Вспомогательные пакеты","text":"devtools - инструменты разработчика пакетаusethis - автоматизация настройки разрабатываемого пакетаtestthat - разработка юнит тестов к функциям пакетаroxygen2 - упрощённое написание документации к функциям пакета","code":""},{"path":"обзор-рабочего-процесса-разработки-пакета.html","id":"процесс-разработки-пакета","chapter":"Урок 1 Обзор рабочего процесса разработки пакета","heading":"1.3.2 Процесс разработки пакета","text":"Создаём проект пакета с помощью команды create_package()Включаем контроль версий с помощью функции use_git()Добавляем лицензию командой use_mit_licence()Добавляем в пакет функции с помощью команды use_r()Документируем созданные функции добавляя специализированиы комментарии сочетанием клавиш Ctrl+Alt+Shift+Rгенерируем файлы документации функций командой document()Для тестирования добавляем в файл DESCRIPTION пакет testthat командой use_testthat()Добавляем для каждой функции юнит тесты командой use_test()Запускаем тестирование функций командой test()Для использования функций из стороних пакетов добавляем их в блок Imports файлв DESCRIPTION командой use_package(), в коде используем импортированные функции с помощью package_name::function_name()Проверяем пакет командой check()","code":""},{"path":"обзор-рабочего-процесса-разработки-пакета.html","id":"тест","chapter":"Урок 1 Обзор рабочего процесса разработки пакета","heading":"1.4 Тест","text":"facebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":""},{"path":"настройка-системы-и-интеграция-с-github.html","id":"настройка-системы-и-интеграция-с-github","chapter":"Урок 2 Настройка системы и интеграция с GitHub","heading":"Урок 2 Настройка системы и интеграция с GitHub","text":"Данный урок посвящён настройке вашей операционной системы и среды для разработки пакетов. Мы установим всё необходимое программное обеспечение, зарегистрируем бесплатный аккаунт на GitHub и настроим интеграцию между RStudio и GitHub.Данный урок основан на главе \"System setup\" книги \"R Packages (2e)\", под авторством Хедли Викхема и Дженни Брайан. А так же \"usethis setup\", входящую в документацию пакета usethis.","code":""},{"path":"настройка-системы-и-интеграция-с-github.html","id":"видео-1","chapter":"Урок 2 Настройка системы и интеграция с GitHub","heading":"2.1 Видео","text":"","code":""},{"path":"настройка-системы-и-интеграция-с-github.html","id":"тайм-коды-1","chapter":"Урок 2 Настройка системы и интеграция с GitHub","heading":"2.1.1 Тайм коды","text":"00:00 Вступление\n00:50 Настройка дефолтных опций пакета usethis\n05:13 Установка утилиты rtools\n06:38 Регистрация на GitHub\n08:15 Установка Git\n09:53 Установка учётных данных в Git\n11:27 Создание персонального токена на GitHub\n15:04 Проверяем систему на готовность к компиляции пакетов\n15:40 Отправка пакета из RStudio на GitHub\n17:25 Обзор всего процесса настройки системы для разработки пакетов и интеграции RStudio с GitHub\n18:43 Заключение","code":""},{"path":"настройка-системы-и-интеграция-с-github.html","id":"презентация-1","chapter":"Урок 2 Настройка системы и интеграция с GitHub","heading":"2.2 Презентация","text":"","code":""},{"path":"настройка-системы-и-интеграция-с-github.html","id":"конспект-1","chapter":"Урок 2 Настройка системы и интеграция с GitHub","heading":"2.3 Конспект","text":"Для настройки системы и интеграции с GitHub скачайте и установите следующее программное обеспечение:Rtools - Специальная утилита для сборки пакетов на Windows (только если работаете на Windows).Git - система управления версиями с распределенной архитектурой.","code":""},{"path":"настройка-системы-и-интеграция-с-github.html","id":"настройка-дефорлтных-опций-пакета-usethis","chapter":"Урок 2 Настройка системы и интеграция с GitHub","heading":"2.3.1 Настройка дефорлтных опций пакета usethis","text":"Для удобства вы можете настроить некоторые опции пакета usethis по умолчанию, например есть смысл проставлять по умолчанию в файле DESCRIPTION вас как автора пакета.Некоторые опции usethis:usethis.description - именованный список полей DESCRIPTION по умолчанию для новых пакетов, созданных с помощью usethis::create_package()usethis.full_name – задаёт имя по умолчанию, которое будет использоваться например при создании файла лицензииusethis.quiet – запрещает usethis выводить сообщения в консольusethis.destdir - каталог по умолчанию для использования в create_from_github()и use_course()Наиболее простой способ задать опции - отредактироваьт глобальный файл .Rprofile, выполните команду usethis::edit_r_profile(), после чего в RStudio откроется .Rprofile, далее добавьте в него код определния нудных опций:Теперь при создании пакета с помощью команды usethis::create_package() файле DESCRIPTION автоматически будет заполняться поле с указанием автора пакета.","code":"\noptions(\n  usethis.description = list(\n    \"Authors@R\" = utils::person(\n      \"Alexey\", \"Seleznev\",\n      email = \"selesnow@gmail.com\",\n      role = c(\"aut\", \"cre\"),\n      comment = c(ORCID = \"0000-0003-0410-7385\")\n    )\n  ),\n  usethis.destdir = \"C:/Users/SAMSUNG/Documents\",\n  usethis.overwrite = TRUE\n)"},{"path":"настройка-системы-и-интеграция-с-github.html","id":"настройка-системы","chapter":"Урок 2 Настройка системы и интеграция с GitHub","heading":"2.3.2 Настройка системы","text":"Скачайте и установите Rtools, если работаете на WindowsСкачайте и установите GitПерезагрузите системуУстановите учётные данные для Git","code":"\nlibrary(usethis)\n\n# подключаем Git\nuse_git()\n\n# имя для Git вы можете задать любое, им будут подписываться коммиты\n# email должен быть связан с учётной записью GitHub\nuse_git_config(user.name = \"Your Name\", user.email = \"your@gmail.com\")\n\n# проверка настроек\ngit_sitrep()"},{"path":"настройка-системы-и-интеграция-с-github.html","id":"интеграция-rstudio-с-github","chapter":"Урок 2 Настройка системы и интеграция с GitHub","heading":"2.3.3 Интеграция RStudio с GitHub","text":"Зарегистрируйте бесплатный аккаунт на GithubСоздайте персональный токен на GitHubДобавьте созданный токен в хранилище учётных данныхОпубликуйте проект вашего пакета на GitHub","code":"\n# получаем токен GitHub\nusethis::create_github_token()\n\n# добавляем токен в хранилище учётных данных\ngitcreds::gitcreds_set()\n\n# пуьбликуем проект пакета\nusethis::use_github()"},{"path":"настройка-системы-и-интеграция-с-github.html","id":"задание","chapter":"Урок 2 Настройка системы и интеграция с GitHub","heading":"2.4 Задание","text":"В этом уроке вместо теста у нас будет задание:Устновите rtools (только если работаете на Windows)Устновите GitЗарегистрируйте бесплатный аккаунт на Github (если его у вас ещё нет)Настройте интеграцию RStudio с GitHubСоздайте проект будущего пакетаОпубликуйте его на Githubfacebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":""},{"path":"рекомендации-по-организации-r-кода.html","id":"рекомендации-по-организации-r-кода","chapter":"Урок 3 Рекомендации по организации R кода","heading":"Урок 3 Рекомендации по организации R кода","text":"В этом уроке мы разберёмся с базовыми рекомендациями по организации кода вашего пакета, а так же узнаем чем принципиально отличается разработка пакета от написания обычного R сценария.Данный урок основан на главе \"R code\" книги \"R Packages (2e)\", под авторством Хедли Викхема и Дженни Брайан.","code":""},{"path":"рекомендации-по-организации-r-кода.html","id":"видео-2","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.1 Видео","text":"","code":""},{"path":"рекомендации-по-организации-r-кода.html","id":"тайм-коды-2","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.1.1 Тайм коды","text":"00:00 Вступление\n00:44 Из каких компонентов состоит пакет\n01:07 Как организовать функции пакета в файлы\n03:55 Про функции library() и source() в коде пакет\n05:32 Не изменяйте настройки глобальной среды R: функция .exit() и пакет withr\n14:09 Как задать локальные опции пакета, функция .onLoad()\n17:10 Код пакета определённый вне функций\n18:20 Заключение","code":""},{"path":"рекомендации-по-организации-r-кода.html","id":"презентация-2","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.2 Презентация","text":"","code":""},{"path":"рекомендации-по-организации-r-кода.html","id":"конспект-2","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.3 Конспект","text":"","code":""},{"path":"рекомендации-по-организации-r-кода.html","id":"организация-функций-в-файлы","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.3.1 Организация функций в файлы","text":"По поводу организаций функций в файлы нет строгих правил, есть два крайних подхода:Поместить каждую функцию в отдельный R файлПоместить код всех функций в один R файлОба этих подхода далеки от лучших практик, и затрудняют навигацию по коду пакета, поэтому для организации функций придерживайтесь следубщих правил:Если у вас есть семейство функций поместите их в один R файлЕсли у вас есть функция и набор вспомогательных к ней функций, поместите основную функцию и её помощников в один R файлЕсли функция не имеет помощников, и не входит ни в какое семейство функций, поместите её отдельно в R файл","code":""},{"path":"рекомендации-по-организации-r-кода.html","id":"команды-library-и-source","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.3.2 Команды library() и source()","text":"Никогда не используйте в коде пакета команды library(), require() и source():library() и require() изменяют путь поиска, влияя на то, какие функции доступны из глобальной среды. Вместо этого вы должны использовать DESCRIPTION для указания требований вашего пакета. Это также гарантирует, что эти пакеты будут установлены при установке вашего пакета.source() изменяет текущую среду, вставляя результаты выполнения кода. Для использования добавленных функций в ваш пакет используйте load_all() или test().","code":""},{"path":"рекомендации-по-организации-r-кода.html","id":"пакет-не-должен-изменять-настройки-глобального-окружения-r","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.3.3 Пакет не должен изменять настройки глобального окружения R","text":"Фукнции вашего пакета не должны изменять глобальных настроек, т.е. опций, переменных среды, счётчика генерации случайных чисел, и т.д. глобальной среды R. Поэтому старайтесь избегать, или использовать с крайней осторожностью такие команды как:options()par()setwd()Sys.setenv()Sys.setlocale()set.seed()Если вам всё таки необходимо внутри функций вашего пакета переопределять состояние среды, делайте это так, что бы при выходе из функции все переопределённые опции возвращались к исходному значению. Сделать это можно с помощью:Базовой функции .exit()Функционала пакета withr","code":""},{"path":"рекомендации-по-организации-r-кода.html","id":"пример-неправильного-определения-опций-пакета","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.3.3.1 Пример неправильного определения опций пакета:","text":"Функция f1() в своём коде переопределяет значение опции test.opt, до запуска функции данная опция имела значение 10, функция, незаметно для её пользователя, изменила это значение на 15 в глобальной среде. Это может вызвать проблемы, если данная опция используется шде-то далее в вашем коде, при чём обнаружиь такую проблему зачастую довольно сложно.","code":"\n# Неправильная установка опций --------------------------------------------\n## определяем какую то опцию в рамках сеанса\noptions(test.opt = 10)\n## запрашиваем значение опции\ngetOption('test.opt')\n#> [1] 10\n\n# определяем функцию изменяющую значение опции\nf1 <- function(x) {\n\n  options(test.opt = x)\n  getOption('test.opt')\n\n}\n\n## запускаем функцию\nf1(15)\n#> [1] 15\n## работа функции изменила значение опции, определённое в глобальной среде\ngetOption('test.opt')\n#> [1] 15"},{"path":"рекомендации-по-организации-r-кода.html","id":"пример-локального-изменения-опция-с-помощью-функции-on.exit","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.3.3.2 Пример локального изменения опция с помощью функции on.exit():","text":"В функции f2() мы добавили конструкцию old <- options(test.opt = x), которая созраняет прежнее значение опции перед тем, как присвоить новое. Далее с помощью функции .exit(options(old)) мы говорим нашей фукнции вернуть исходное значение заданой внутри функции опции test.opt. Как видим, теперь функция не изменяет значение опции в глобальной среде, заданное изменение действует только внутри функции.","code":"\n# базовая конструкция on.exit() -------------------------------------------\n## возвращаем дефолтное значение опции\noptions(test.opt = 10)\n\n## пишем код функции, работающий с опцией локально\nf2 <- function(x) {\n\n  old <- options(test.opt = x)\n  on.exit(options(old))\n  getOption('test.opt')\n\n}\n\n# запускаем функцию\nf2(15)\n#> [1] 15\n# проверяем значение опции после её выполнения\ngetOption('test.opt')\n#> [1] 10"},{"path":"рекомендации-по-организации-r-кода.html","id":"пример-изменения-опции-с-помощью-функционала-пакета-withr","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.3.3.3 Пример изменения опции с помощью функционала пакета withr:","text":"Пакет withr предоставляет более гибкий функционал для локального изменения значений опций.\nПример изменения опций с помощью функции with_options():При использовании функций с префиксом with_*() область действия изменений внесённых в опции или переменные среды распространяется только на код, прописанный в качестве второго аргумента самой функций. Поэтому внутри функции f3() изначально значение опции test.opt равно 10, после внутри функции with_options() мы его меняем на 15, после выхода из функции with_options() опция test.opt опять имеет глобально определённое значение 10, не смотря на то, что мы ещё не вышли из основной функции f3().Пример изменения опций с помощью функции with_local():Функции с префиксом local_*() определяют изменения среды, которые действуют внутри вашей функции, т.е. так же как и базовая функция .exit().","code":"\n# установка опций с помощью withr -----------------------------------------\n## определяем какую то опцию в рамках сеанса\noptions(test.opt = 10)\n## запрашиваем значение опции\ngetOption('test.opt')\n#> [1] 10\n\n## with_*() - функции лучше всего подходят для выполнения небольших фрагментов кода с временно измененным состоянием.\nf3 <- function(x) {\n\n  print(getOption('test.opt'))\n\n  withr::with_options(\n    list(test.opt = x),\n    print(getOption('test.opt'))\n  )\n\n  print(getOption('test.opt'))\n\n}\n\n# запускаем функцию\nf3(15)\n#> [1] 10\n#> [1] 15\n#> [1] 10\n## запрашиваем значение опции\ngetOption('test.opt')\n#> [1] 10\n## local_*() - функции определяют значения опций, которые будут действоваьт до выхода из функции.\n\nf4 <- function(x) {\n\n  print(getOption('test.opt'))\n  withr::local_options(list(test.opt = x))\n  print(getOption('test.opt'))\n\n}\n\n# запускаем функцию\nf4(15)\n#> [1] 10\n#> [1] 15\n## запрашиваем значение опции\ngetOption('test.opt')\n#> [1] 10"},{"path":"рекомендации-по-организации-r-кода.html","id":"как-задать-локальные-опции-своего-пакета","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.3.4 Как задать локальные опции своего пакета","text":"Иногда вам может понадобиться определить внутренние опции, ищменяющие поведение вашего пакета. Код определния опций следует прописывать внутри специальной функции .onLoad(). Данная функция выполняется каждый раз при загрузке пакета в память, т.е. при выполнении команды library(package_name). Код определения функций пакета принято помещать в файл zzz.R, делается это для того, что бы данный фрагмент кода пакета выполнялся в последнюю очередь.Так же важно придерживаться описанного выше правила, не менять значения опций глобального окружения, поэтому название опций пакета следует задавать согласно шаблону package_name.option_name. Перед тем, как определить значение опций пакета убедитесь, что пользовал не установил их значения до подключения самого пакета, что бы не изменить их значения незаметно для конечного пользователя вашего пакета.Пример очень урезанного кода определения внутренних опций пакета dplyr:Что делает приведённый выше код:Изначально командой op <- options() мы считываем все опции определённые в глобальном окруженииДалее мы задаём список (package_name.op) опций нашего пакета, именуя опции согласно шаблону package_name.option_nameКоманда toset <- !(names(op.dplyr) %% names(op)) проверяет - небыли ли установлены глобально значения каких либо опций нашего пакетаЕсли хотя бы одна из опций пакета не имеет значений в глобальном окружении (((toset))) то устанавливаем для неопределнных опций дефолтные значения (options(op.dplyr[toset])).","code":"\n.onLoad <- function(libname, pkgname) {\n  op <- options()\n  op.dplyr <- list(\n    dplyr.show_progress = TRUE\n  )\n  toset <- !(names(op.dplyr) %in% names(op))\n  if (any(toset)) options(op.dplyr[toset])\n\n  invisible()\n}"},{"path":"рекомендации-по-организации-r-кода.html","id":"тест-1","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.4 Тест","text":"facebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":""},{"path":"добавление-данных-в-пакет.html","id":"добавление-данных-в-пакет","chapter":"Урок 4 Добавление данных в пакет","heading":"Урок 4 Добавление данных в пакет","text":"В этом уроке мы разберёмся с тем для чего вам может понадобиться добавить в ваш пакет помимо кода функций ещё и данные, и рассмотрим 5 способов это сделать.Данный урок основан на главе \"Data\" книги \"R Packages (2e)\", под авторством Хедли Викхема и Дженни Брайан.","code":""},{"path":"добавление-данных-в-пакет.html","id":"видео-3","chapter":"Урок 4 Добавление данных в пакет","heading":"4.1 Видео","text":"","code":""},{"path":"добавление-данных-в-пакет.html","id":"тайм-коды-3","chapter":"Урок 4 Добавление данных в пакет","heading":"4.1.1 Тайм коды","text":"00:00 Введение\n00:35 Зачем добавлять данные в пакет\n02:08 Экспортируемые данные\n05:20 Внутренние данные пакета\n07:57 Необработанные данные\n13:51 Состояние пакета (внутренняя среда пакета)\n16:30 Постоянные пользовательские данные\n18:30 Прочие каталоги пакета\n19:33 Заключение","code":""},{"path":"добавление-данных-в-пакет.html","id":"презентация-3","chapter":"Урок 4 Добавление данных в пакет","heading":"4.2 Презентация","text":"","code":""},{"path":"добавление-данных-в-пакет.html","id":"конспект-3","chapter":"Урок 4 Добавление данных в пакет","heading":"4.3 Конспект","text":"","code":""},{"path":"добавление-данных-в-пакет.html","id":"какие-типы-данных-можно-добавить-в-пакет","chapter":"Урок 4 Добавление данных в пакет","heading":"4.3.1 Какие типы данных можно добавить в пакет","text":"Есть 5 способов добавления данных в ваш пакет, в зависимости от того, как эти данные далее будут использоваться:Экспортируемые данныеВнутренние данныеНеобработанные данныеСреда пакетаПостоянные пользовательские данные","code":""},{"path":"добавление-данных-в-пакет.html","id":"экспортируемые-данные","chapter":"Урок 4 Добавление данных в пакет","heading":"4.3.2 Экспортируемые данные","text":"Это данные, которые экспорптируются при подключении пакета, и подразумевают их дальнейшее использование конечными пользователями вашего пакета. Зачастую в пакет добавляют несколько наборов данных, которые используются в примерах использования функционала пакета, иногда встречаются пакеты, которые состоят исключительно из данных.Экспортируемые данные хнятся в виде .rda файлов в специальном каталоге data/. Наиболее простой способ включить экспортируемые данные в ваш пакет предоставляет функция usethis::use_data().Функция usethis::use_data() выполняет следующее:Создаёт каталогdata/, если его ещё нетДобавляет в каталог data/ .rda файлыДобавляет блок LazyData: true в DESCRIPTION файлНе смотря на то, что у вас есть возможность созранить любе количество наборов данных в один .rda файл рекомендуется под каждый экспортируемый набор данных создавать отдельный файл в папке data/.","code":"\n# создаём набор данных\nboard_of_directors <- tibble::tibble(\n  id            = 1:5,\n  name          = c(\"Alex\", \"John\", \"Bill\", \"Stiv\", \"Michael\"),\n  position      = c(\"CEO\", \"CTO\", \"CMO\", \"CDO\", \"CFO\"),\n  department    = rep(\"Board of Directors\", 5),\n  year_of_birth = c(1984, 1971, 1987, 1980, 1978),\n  rate          = c(5000, 4200, 3500, 4500, 3500),\n  office        = c(\"New York\", \"New York\", \"Chicago\", \"Washington\", \"Washington\")\n)\n\n# сохраняем его в каталог data\nusethis::use_data(board_of_directors)"},{"path":"добавление-данных-в-пакет.html","id":"внутренние-данные","chapter":"Урок 4 Добавление данных в пакет","heading":"4.3.3 Внутренние данные","text":"Данные, которые используются искобчительно функциями вашего пакета, являются исключительно технической, а не функциональнйо частью вашего пакета, и для конечного пользователя эти данные недоступны. Соответвенно внутренние данные не экспортируются при подключения пакета. Такие данные хрантся в специальном файле sysdata.rda в каталоге R/, т.е. вместе с кодом функций пакета.Добавить в пакет внутренние данные можно той же функцией usethis::use_data(), но указав значение аргумента internal = TRUE.В отличае от экспортируемых данных, все внутренние наборы данных помещаются в один файл sysdata.rda, поэтому все их необходимо одновременно указать в функции usethis::use_data().","code":"\n# создаём наборы данных\nboard_of_directors <- tibble::tibble(\n  id            = 1:5,\n  name          = c(\"Alex\", \"John\", \"Bill\", \"Stiv\", \"Michael\"),\n  position      = c(\"CEO\", \"CTO\", \"CMO\", \"CDO\", \"CFO\"),\n  department    = rep(\"Board of Directors\", 5),\n  year_of_birth = c(1984, 1971, 1987, 1980, 1978),\n  rate          = c(5000, 4200, 3500, 4500, 3500),\n  office        = c(\"New York\", \"New York\", \"Chicago\", \"Washington\", \"Washington\")\n)\n\noffice_coef <- tibble::tibble(\n  office = c(\"New York\", \"Chicago\", \"Washington\"),\n  coef   = c(1.2, 0.85, 1.1)\n)\n\n# сохраняем его в файл R/sysdata.rda\nusethis::use_data(board_of_directors, office_coef, internal = T)"},{"path":"добавление-данных-в-пакет.html","id":"необработанные-данные","chapter":"Урок 4 Добавление данных в пакет","heading":"4.3.4 Необработанные данные","text":"Такие данные могут использоваться для предоставления тестовых данных, для примеров использования функций пакета. Например, в пакет readxl, предназначенный для чтения данных из Excel книг, включены несколько Excel книг, исключительно для того, что бы пользователи могли протестировать его работу, описанную в примерах к функциям пакета.Необработанные данные необходимо хранить в специальном каталоге по пути inst/extdata, т.е. создаёте каталог inst, и внутри него подкаталог extdata.Далее в эту папку добавляете файлы с данными.для обращения к добавленным необработанным данным необходимо использовать функцию system.file(), но тут есть один нюанс. Дело в том, что ваш пакет может иметь разные состояни. в момент разработки это просто проект, который может находится в любом месте на вашем жестком диске, а функция system.file() ищет файлы исключительно в уже установленных пакетах, и если вы её просто будете использовать в вашем пакете, она вернёт пустую строку, вместо пути к файлу с необработанными данными. Но, как вы помните команда load_all() имитирует процесс загрузки вашего разрабатываемого пакета в память. очень близко к тому, как это делает команда library() с уже установленными пакетами. Поэтому, для того, что бы команда system.file() успешно работала в момент разработки вашего пакета, вам всегда необходимо держать пакет в состоянии загруженном в память, т.е. до того, как вы будете тестировать ваши функции нажмите сочетание клавиш Ctrl + Shift + L.","code":"\ndir.create('inst/extdata', recursive = T)\n# Пример обращения к сырым данным пакета firstpackage\n# предварительно обязательно надо загрузить пакет в память через load_all()\nsystem.file('extdata', 'board_of_directors.csv', package = 'firstpackage')"},{"path":"добавление-данных-в-пакет.html","id":"среда-пакета","chapter":"Урок 4 Добавление данных в пакет","heading":"4.3.5 Среда пакета","text":"Данный приём используется если вам необходимо динамически изменять состояние вашего пакета. В таком случае вам необходимо создать внутри пакета отдельную среду, добавьте файл aaa.R в каталог R/, в котором создайте пустую среду, и добавльте в неё нужные объекты:Далее в случае необходимости обращения, или изменения значений созданных внутри среды объектов добавьте специальные функции:Код заимствован из книги \"R Packages 2e\", Hadley Wickham, глава Data, раздел Internal stateТакие данные могут динамически изменяться в ходе одного R сеанса, но при повторном сеансе будут стартовать со своих исходных значений.","code":"\nthe <- new.env(parent = emptyenv())\nthe$favorite_letters <- letters[1:3]\n#' Report my favorite letters\n#' @export\nmfl2 <- function() {\n  the$favorite_letters\n}\n\n#' Change my favorite letters\n#' @export\nset_mfl2 <- function(l = letters[24:26]) {\n  old <- the$favorite_letters\n  the$favorite_letters <- l\n  invisible(old)\n}"},{"path":"добавление-данных-в-пакет.html","id":"постоянные-пользовательские-данные","chapter":"Урок 4 Добавление данных в пакет","heading":"4.3.6 Постоянные пользовательские данные","text":"Иногда вам может понадобится хранить какие то данные, которые будут использоваться между различными R сеансами. Например, я в своих пакетах таким образом храню авторизационные данные пользователя, для того, что бы пользователям моих пакетов не требовалось в ходе каждой новой R сессии проходить авторизацию через браузер, они один раз проходят весь процесс авторизации, полученные данные кешируются на жестком диске конечного пользователя, и во всех следующих сеансах читаются из кеша, что поволяет избегать повторной пользовательской авторизации.Конечно данные, которые будут использоваться между различными R сессиями необходимо хранить локально. на жестком диске пользователя пакета. При этом обязательно необходимо соблюдать спецификацию каталогов принятую для вашей операционной системы, для определения директорий в которых вы будете хранить файлы вашего пакета используйте функцию tools::R_user_dir():tools::R_user_dir(\"pkg\", = \"data\") – хранение данныхtools::R_user_dir(\"pkg\", = \"config\") – хранение конфиговtools::R_user_dir(\"pkg\", = \"cache\") – хранение кешированных данныхНо, следует учитывать что функция tools::R_user_dir() появилась в R 4.0, если вашему пакету необходимо иметь совместимость с более старыми версиями R, то в качестве альтернативного варианта используйте функционал пакета rappdirs, о котором я отдельно рассказывал в видео уроке \"Работа с секретными данными в R\".","code":""},{"path":"добавление-данных-в-пакет.html","id":"тест-2","chapter":"Урок 4 Добавление данных в пакет","heading":"4.4 Тест","text":"facebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":""},{"path":"description---метаданные-пакета.html","id":"description---метаданные-пакета","chapter":"Урок 5 DESCRIPTION - Метаданные пакета","heading":"Урок 5 DESCRIPTION - Метаданные пакета","text":"В этом видео мы с вами подробно разберёмся с содержимым одного из главных файлов в вашем пакете - DESCRIPTION, в котором хранятся его метаданные.Данный урок основан на главе \"DESCRIPTION\" книги \"R Packages (2e)\", под авторством Хедли Викхема и Дженни Брайан.","code":""},{"path":"description---метаданные-пакета.html","id":"видео-4","chapter":"Урок 5 DESCRIPTION - Метаданные пакета","heading":"5.1 Видео","text":"","code":""},{"path":"description---метаданные-пакета.html","id":"тайм-коды-4","chapter":"Урок 5 DESCRIPTION - Метаданные пакета","heading":"5.1.1 Тайм коды","text":"00:00 Вступление\n00:39 Назначение и минимальный пример файла DESCRIPTION\n01:53 Настройка дефолтных значений полей файла DESCRIPTION с помощью опции usethis.description\n03:04 Поля Title и Description\n04:09 Поле Authors@R для указания авторства пакета\n06:03 Поля URL и BugReports\n06:34 Поле License\n09:24 Поля Imports и Suggests\n12:30 Прочие поля файла DESCRIPTION\n14:20 Использование пользовательских полей в файле DESCRIPTION\n15:17 Заключение","code":""},{"path":"description---метаданные-пакета.html","id":"презентация-4","chapter":"Урок 5 DESCRIPTION - Метаданные пакета","heading":"5.2 Презентация","text":"","code":""},{"path":"description---метаданные-пакета.html","id":"конспект-4","chapter":"Урок 5 DESCRIPTION - Метаданные пакета","heading":"5.3 Конспект","text":"Задача файла DESCRIPTION— хранить важные метаданные о вашем пакете. При создании пакета функцией usethis::create_package() в созданном проекте будет сразу добавлен минимальный пример файл DESCRIPTION.Во втором уроке курса я уже рассказывал о том, что вы можете задать дефолтные значения любых полей файла DESCRIPTION, для этого добавьте код определения опции usethis.description в файл .Rprofile.Далее подробно разберёмся все обязательные поля файла DESCRIPTION","code":"Package: package_name\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"Alexey\", \"Seleznev\", , \"selesnow@gmail.com\", role = c(\"aut\", \"cre\"),\n           comment = c(ORCID = \"0000-0003-0410-7385\"))\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\noptions(\n  usethis.description = list(\n    \"Authors@R\" = utils::person(\n        \"Jane\", \"Doe\",\n        email = \"jane@example.com\",\n        role = c(\"aut\", \"cre\"),\n        comment = c(ORCID = \"JANE'S-ORCID-ID\")\n    )\n  )\n)"},{"path":"description---метаданные-пакета.html","id":"title-и-description","chapter":"Урок 5 DESCRIPTION - Метаданные пакета","heading":"5.3.1 Title и Description","text":"Title представляет собой однострочное описание пакета и часто отображается в листинге пакета. Это должен быть обычный текст (без разметки), каждое слово должно начинаться с заглавной буквы, и НЕ заканчивающийся точкой. Будьте краткими: списки часто урезают заголовок до 65 символов.Description более подробное описание, чем заголовок. Вы можете использовать несколько предложений, но вы ограничены одним абзацем. Если ваше описание занимает несколько строк (а так и должно быть!), ширина каждой строки не должна превышать 80 символов. Отступ последующих строк с 4 пробелами.","code":""},{"path":"description---метаданные-пакета.html","id":"authorsr","chapter":"Урок 5 DESCRIPTION - Метаданные пакета","heading":"5.3.2 Authors@R","text":"Ранее для указания авторства использовались поля Author и Mainter, но сейчас более гибким способом является поле Authors@R, в которое вам необходимо перечислить авторов и сопровождающих вашего пакета с помощью функции utils::person().Аргументы функции utils::person():Имя, указанное первыми двумя аргументами given и family (обычно они задаются по положению, а не по имени).email, который является абсолютным требованием для сопровождающего. Важно отметить, что это адрес, который CRAN использует, чтобы сообщить вам, нужно ли исправить ваш пакет, чтобы остаться в CRAN.Один или несколько трехбуквенных кодов, определяющих расширение role. Вот самые важные роли, о которых нужно знать:\ncre: создатель или сопровождающий, человек, которого вы должны беспокоить, если у вас есть проблемы.\naut: авторы, внесшие значительный вклад в разработку пакета.\nctb: участники, те, кто внес меньший вклад, например патчи.\ncph: правообладатель. Это используется для перечисления дополнительных правообладателей, которые не являются авторами, как правило, компаний, таких как работодатель одного или нескольких авторов.\nfnd: спонсор, люди или организации, предоставившие финансовую поддержку для разработки пакета.\ncre: создатель или сопровождающий, человек, которого вы должны беспокоить, если у вас есть проблемы.aut: авторы, внесшие значительный вклад в разработку пакета.ctb: участники, те, кто внес меньший вклад, например патчи.cph: правообладатель. Это используется для перечисления дополнительных правообладателей, которые не являются авторами, как правило, компаний, таких как работодатель одного или нескольких авторов.fnd: спонсор, люди или организации, предоставившие финансовую поддержку для разработки пакета.","code":""},{"path":"description---метаданные-пакета.html","id":"url-и-bugreports","chapter":"Урок 5 DESCRIPTION - Метаданные пакета","heading":"5.3.3 URL и BugReports","text":"Поле URL обычно используется для рекламы веб-сайта пакета и для ссылки на общедоступный репозиторий исходных кодов, где происходит разработка.BugReports это URL-адрес, по которому следует отправлять отчеты об ошибках, например, как раздел issues GitHub.","code":""},{"path":"description---метаданные-пакета.html","id":"license","chapter":"Урок 5 DESCRIPTION - Метаданные пакета","heading":"5.3.4 License","text":"данное поле отвечает за тип лицензии вашего пакета, лицензия может регулировать законные права сторонних разработчиков на использование вашего кода, и в частности всего пакета в их собственных разработках или публикациях. Важно понимать, что это, по сути, машиночитаемое License поле, и не стоит заполнять его руками, для каждого типа лицензии в пакете usethis есть отдельная функция, которая заполняет поле License и добавляет в ваш пакет отдельный файл с описанием лицензии.use_mit_license() – если вам нужна лицензия, чтобы люди могли использовать ваш код с минимальными ограничениямиuse_gpl_license() - если вам нужна лицензия с авторским левом, чтобы все производные и пакеты вашего кода также имели открытый исходный кодuse_cc0_license() - если ваш пакет в основном содержит данные, а не код, и вам нужны минимальные ограниченияuse_ccby_license() – если ваш пакет содержит только данные, но вы хотите указания вашего авторстваuse_proprietary_license() - если вы не хотите делать свой код открытым (На CRAN не пустят)","code":""},{"path":"description---метаданные-пакета.html","id":"imports-suggests-depends","chapter":"Урок 5 DESCRIPTION - Метаданные пакета","heading":"5.3.5 Imports, Suggests, Depends","text":"Пакеты, перечисленные в, Imports необходимы вашим пользователям во время выполнения и будут установлены (или потенциально обновлены), когда пользователи установят ваш пакет через install.packages().Пакеты, перечисленные в, Suggests либо необходимы для задач разработки, либо могут разблокировать дополнительные возможности пакета для ваших пользователей.Для добавления необходимых пакетов в зависимости, т.е. в поля Imports или Description используйте функцию usethis::use_package().Так же вы можете использовать аргумент min_version для указания минимальной или текущей версии пакета, от которого щависит ваш пакет:","code":"\nusethis::use_package(\"dplyr\") # Default is \"Imports\"\n#> ✔ Adding 'dplyr' to Imports field in DESCRIPTION\n#> • Refer to functions with `dplyr::fun()`\n\nusethis::use_package(\"ggplot2\", \"Suggests\")\n#> ✔ Adding 'ggplot2' to Suggests field in DESCRIPTION\n#> • Use `requireNamespace(\"ggplot2\", quietly = TRUE)` to test if package is installed\n#> • Then directly refer to functions with `ggplot2::fun()`\n# exact version\nusethis::use_package(\"dplyr\", min_version = \"1.0.0\")\n\n# min version = currently installed version\nusethis::use_package(\"dplyr\", min_version = TRUE)"},{"path":"description---метаданные-пакета.html","id":"другие-поля","chapter":"Урок 5 DESCRIPTION - Метаданные пакета","heading":"5.3.6 Другие поля","text":"Выше я перечислил все обязательные поля файла DESCRIPTION, но вам также доступны некоторые другие поля:Version – Версия вашего пакета, удобный способ сообщить на какой версии разработки находится ваш пакет.LazyData – актуален если ваш пакет делает данные доступными для пользователя. Если вы укажете LazyData: true, наборы данных загружаются отложенно, что делает их более доступными, т. е. пользователям не нужно использовать data().Encoding – Описывает кодировку файлов вашего пакета.Collate - управляет порядком получения файлов R.VignetteBuilder - перечисляет любой пакет, который нужен вашему пакету в качестве механизма виньетирования.SystemRequirements - Здесь вы описываете зависимости, внешние по отношению к R. Это обычное текстовое поле, которое, например, фактически не устанавливает и не проверяет что-либо, поэтому вам может потребоваться включить дополнительные сведения об установке в файл README.","code":""},{"path":"description---метаданные-пакета.html","id":"пользовательские-поля","chapter":"Урок 5 DESCRIPTION - Метаданные пакета","heading":"5.3.7 Пользовательские поля","text":"Существует также некоторая гибкость для создания собственных полей для добавления дополнительных метаданных. В самом узком смысле единственным ограничением является то, что вы не должны переназначать официальные имена полей, используемые R. Вы также должны ограничить себя допустимыми английскими словами, чтобы имена полей не помечались проверкой орфографии.На практике, если вы планируете отправлять в CRAN, мы рекомендуем, чтобы имя любого настраиваемого поля начиналось с Config/.","code":""},{"path":"description---метаданные-пакета.html","id":"тест-3","chapter":"Урок 5 DESCRIPTION - Метаданные пакета","heading":"5.4 Тест","text":"facebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":""},{"path":"namespace---зависимости-пакета.html","id":"namespace---зависимости-пакета","chapter":"Урок 6 NAMESPACE - Зависимости пакета","heading":"Урок 6 NAMESPACE - Зависимости пакета","text":"Если вы в своём пакете используете функции из других пакетов, значит ваш пакет имеет зависимости. В этом уроке мы разберёмся с тем, как правильно организовать эти зависимости.Данный урок основан на главах \"Dependencies: Mindset Background\" и \"Dependencies: Practice\" книги \"R Packages (2e)\", под авторством Хедли Викхема и Дженни Брайан.","code":""},{"path":"namespace---зависимости-пакета.html","id":"видео-5","chapter":"Урок 6 NAMESPACE - Зависимости пакета","heading":"6.1 Видео","text":"","code":""},{"path":"namespace---зависимости-пакета.html","id":"тайм-коды-5","chapter":"Урок 6 NAMESPACE - Зависимости пакета","heading":"6.1.1 Тайм коды","text":"00:00 Вступление\n00:50 Преимущества и недостатки зависимостей\n02:41 Анализ зависимостей пакетов\n05:50 Какие компоненты пакета отвечают за его зависимости\n07:37 Файл NAMESPACE\n08:35 Рабочий процесс установки зависимостей\n14:56 Когда стоит импортировать объекты из других пакетов\n16:38 Как обращаться к функциям импортированным из других пакетов в коде, тестах и примерах вашего пакета, если поля указаны в поле Imports\n18:04 Как обращаться к функциям импортированным из других пакетов в коде вашего пакета, если поля указаны в поле Suggest\n21:34 Как обращаться к функциям импортированным из других пакетов в тестах вашего пакета, если поля указаны в поле Suggest\n23:10 Как обращаться к функциям импортированным из других пакетов в виньетках и примерах к функциям вашего пакета, если поля указаны в поле Suggest\n24:26 Как обращаться к функциям импортированным из других пакетов в коде, тестах и примерах вашего пакета, если поля указаны в поле Depends\n26:05 Импорт и экспорт S3 методов\n28:30 Заключение","code":""},{"path":"namespace---зависимости-пакета.html","id":"презентация-5","chapter":"Урок 6 NAMESPACE - Зависимости пакета","heading":"6.2 Презентация","text":"","code":""},{"path":"namespace---зависимости-пакета.html","id":"конспект-5","chapter":"Урок 6 NAMESPACE - Зависимости пакета","heading":"6.3 Конспект","text":"Зависимости в вашем пакете появляются когда вы в коде своего пакета используете функции из сторонних пакетов.","code":""},{"path":"namespace---зависимости-пакета.html","id":"преимущества-и-недостатоки-зависимости","chapter":"Урок 6 NAMESPACE - Зависимости пакета","heading":"6.3.1 Преимущества и недостатоки зависимости","text":"Преимуществом является то, что экономите массу времени, на том, что используете чей то готовый код, который наверняка уже прошел определённое тестирование. Вам не придётся часть вспомогательного для вашего пакета функцила реализовывать самостоятельно, вы просто берёте нужные функции из дургого пакета, и используете в своём коде, так же как вы это делаете, когда пишите любой R скрипт.Но, за всё надо платить, поэтому в использовании зависимостей есть и ряд недостатоков:Ваш код становится чувствителен к изменениям в сторонних пакетах, и даже пакетов указанных в зависимостях используемыми вами пакетов.При установке вашего пакета, так же будут устанавливаться все пакеты от которых он зависит, что увеличивает занимаемое им место на жестком диске. Подавляющее большинство пакетов не занимают много места, но некторые могут весить более 100 мб.","code":""},{"path":"namespace---зависимости-пакета.html","id":"анализ-зависимостей-пакета","chapter":"Урок 6 NAMESPACE - Зависимости пакета","heading":"6.3.2 Анализ зависимостей пакета","text":"По началу у вас может сложиться мнение, что лучше вообще избавиться от всех зависимостей в своём пакете, но это не так, использование стороннего кода сократит вам очень много времени. Единственное - старайтесь использовать в зависимостях своего пакета низкоуровневые пакеты, у которых мало собственных зависимотей. Провести анализ зависимостей пакета можно с помощью пакета pak и функции pkg_deps_tree(), которая визуально отображает дерево зависимостей указанного пакета:Также вы можете использовать функцию tools::package_dependencies():Пакеты tidyverse и devtools являются не просто высокоуровневыми, они являются мета-пакетами, т.е. коллекциями из других пакетов, поэтому у них в зависомтях более 100 сторонних пакетов, в то время как у низкоуровневых rlang и cli всего 1 зависимость. Крайне изегайте использования в своих зависимостях мета-пакетов, при необходимости используйте нужный из коллекции пакет. Ниже пример, если вам необходимы функции из dplyr или tidyr, которые входят в tidyverse, то импортируйте именно конкретные пакеты, т.к. у них гораздо меньше зависимостей:","code":"# анализ зависимостей\n## просмотр дерева зависимостей\n### низкоуровневые пакеты\npak::pkg_deps_tree(\"tibble\")\n✔ Updated metadata database: 4.68 MB in 5 files.                          \n✔ Updating metadata database ... done                                     \ntibble 3.2.1 [new][dl] (690.77 kB)                                         \n├─fansi 1.0.4 [new][dl] (312.84 kB)\n├─lifecycle 1.0.3 [new][dl] (139.02 kB)\n│ ├─cli 3.6.1 [new][dl] (1.33 MB)\n│ ├─glue 1.6.2 [new][dl] (162.52 kB)\n│ └─rlang 1.1.1 [new][dl] (1.57 MB)\n├─magrittr 2.0.3 [new][dl] (226.89 kB)\n├─pillar 1.9.0 [new][dl] (659.28 kB)\n│ ├─cli\n│ ├─fansi\n│ ├─glue\n│ ├─lifecycle\n│ ├─rlang\n│ ├─utf8 1.2.3 [new][dl] (149.69 kB)\n│ └─vctrs 0.6.3 [new][dl] (1.33 MB)\n│   ├─cli\n│   ├─glue\n│   ├─lifecycle\n│   └─rlang\n├─pkgconfig 2.0.3 [new][dl] (22.45 kB)\n├─rlang\n└─vctrs\n\nKey:  [new] new | [dl] download\n## высокоуровневые пакеты\nn_hard_deps <- function(pkg) {\n  deps <- tools::package_dependencies(pkg, recursive = TRUE)\n  sapply(deps, length)\n}\n\nn_hard_deps(c(\"tidyverse\", \"devtools\", \"rlang\", \"cli\"))tidyverse  devtools     rlang       cli \n      114       101         1         1 \nn_hard_deps(c(\"dplyr\", \"tidyr\"))dplyr tidyr \n   20    26 "},{"path":"namespace---зависимости-пакета.html","id":"какие-компоненты-пакета-отвечают-за-зависимости","chapter":"Урок 6 NAMESPACE - Зависимости пакета","heading":"6.3.3 Какие компоненты пакета отвечают за зависимости","text":"Файл DESCRIPTION, позволяет указать какие пакеты будут установлены или рекомендованы к установке вместе с вашим пакетом:\nПоле Imports: указанные пакеты будут установлены вместе с вашим пакетом;\nПоле Suggest: указанные пакеты будут рекомендованы к установке;\nПоле Depends: указанные пакеты будут установлены и экспортированы вместе с вашим пакетом.\nПоле Imports: указанные пакеты будут установлены вместе с вашим пакетом;Поле Suggest: указанные пакеты будут рекомендованы к установке;Поле Depends: указанные пакеты будут установлены и экспортированы вместе с вашим пакетом.Файл NAMESPACE, управляет экспортом объектов в рабочее окружениеПакеты указанные в поле Imports файла DESCRIPTION не обязательно должны быть указаны в NAMESPACE, но все пакеты и функции перечисленные в файле NAMESPACE, так же обязательно должны быть указаны в полях Imports или Depends файла DESCRIPTION.","code":""},{"path":"namespace---зависимости-пакета.html","id":"директивы-файла-namespace","chapter":"Урок 6 NAMESPACE - Зависимости пакета","heading":"6.3.4 Директивы файла NAMESPACE","text":"Файл NAMESPACE зачустую выглядит примерно следующим образом:export(): экспортировать функцию (включая дженерики S3 и S4).S3method(): экспортировать метод S3.importFrom(): импортировать выбранный объект из другого пространства имен (включая дженерики S4).import(): импортировать все объекты из пространства имен другого пакета.useDynLib(): регистрирует процедуры из DLL (для пакетов с скомпилированным кодом).Есть ещё директива exportPattern(), которая экспортирует функции из вашего пакета по паттерну их имён с использованием регулярных выражений. Использовать эту жирективу не рекомендуется для избежания неожиданного экпорта.","code":"# Generated by roxygen2: do not edit by hand\n\nS3method(compare,character)\nS3method(print,testthat_results)\nexport(compare)\nexport(expect_equal)\nimport(rlang)\nimportFrom(brio,readLines)\nuseDynLib(testthat, .registration = TRUE)"},{"path":"namespace---зависимости-пакета.html","id":"рабочий-процесс","chapter":"Урок 6 NAMESPACE - Зависимости пакета","heading":"6.3.5 Рабочий процесс","text":"Весь рабочий процесс по добавлению зависимостей в пакет состоит из следующих этапов:Изначально добавляете с помощью команды usethis::use_package() необходимые пакеты в нужные поля файла DESCRIPTION.Над кодом функций используйте специальные roxygen комментарии import для импорта всего пространства имён стороннего пакета, или importFrom, для импорта отдельный функций из сторонних пакетов.Запускаете функцию devtools::document() для генерации файла NAMESPACE.Но, где удобнее всего прописать roxygen комментарии для импорта функций и целых пакетов, если вы их многократно используете в своём коде? Первое, что наверняка придёт вам в голову - писать roxygen комментарии для импорта над. каждой функцией, в которой используются импортируемые объекты. Но это слишком избыточно, ведь один roxygen комментарий уже добавит нужную директутиву в файл NAMESPACE, поэтому имеет смысл прописать все комментарии для импорта объектов в одном месте, для чего наиболее удобно использовать функцию usethis::usethis::use_package_doc(). Данная функция создаёт файл R/pkg-package.R, в котом и будут собираться все ваши roxygen комментари для импорта над пустым объектом NULL, выглядит этот файл примерно так:Далее вы будете добавлять в этот файл roxygen комментари с помощью use_import_from().","code":"\n#' @importFrom aaapkg aaa_fun\n#' @import bbbpkg\n#' @export\nfoo <- function(x, y, z) {\n  ...\n}\n# The following block is used by usethis to automatically manage\n# roxygen namespace tags. Modify with care!\n## usethis namespace: start\n#' @importFrom glue glue_collapse\n## usethis namespace: end\nNULL"},{"path":"namespace---зависимости-пакета.html","id":"когда-необходимо-экспортировать-объекты-из-сторонних-пакетов","chapter":"Урок 6 NAMESPACE - Зависимости пакета","heading":"6.3.6 Когда необходимо экспортировать объекты из сторонних пакетов","text":"В ходе курса я неоднократно говорил о том, что зачастую вам не потербуется экспортировать в рабочее окружение функции из стороних пакетов, а вместо этого просто пропишите все необходимые вам пакеты в поле Imports файла DESCRIPTION, а в коде ваших функций образайтесь к функциям импортированных пакетов с помощью package_name::function(). Но из этого правила есть некоторые исключения:Оператор: Вы не можете вызвать оператора из другого пакета через ::, поэтому его необходимо импортировать. Примеры: оператор объединения NULL %||% из rlang или пайплайн %>% из magrittr.Функция, которую вы часто используете. Если импорт функции делает ваш код более читабельным, это достаточная причина для ее импорта. Это буквально уменьшает количество символов, необходимых для вызова внешней функции.Функция, которую вы вызываете в жестком цикле с ::. Поиск объекта вызванного через два двоеточия составляет порядка 100 нс, поэтому оно будет иметь значение только в том случае, если вы вызываете функцию миллионы раз.","code":""},{"path":"namespace---зависимости-пакета.html","id":"как-обращаться-к-функциям-сторонних-пакетов","chapter":"Урок 6 NAMESPACE - Зависимости пакета","heading":"6.3.7 Как обращаться к функциям сторонних пакетов","text":"В зависимости от того как вы импортируете в свой пакет сторонние пакеты зависит то, как вы будете вызывать функции этих пакетов. На это влияет то, какие поля файла DESCRIPTION вы используете.","code":""},{"path":"namespace---зависимости-пакета.html","id":"при-импорте-пакетов-через-поле-imports","chapter":"Урок 6 NAMESPACE - Зависимости пакета","heading":"6.3.7.1 При импорте пакетов через поле Imports","text":"В коде пакета, т.е. в папке R/ обращайтесь к функциям из указанных в поле Imports пакетов package::function().В тестах обращайтесь к функциям из указанных в поле Imports пакетов package::function(). Но если вы импортировали определенную функцию отдельно или как часть всего пространства имен, вы можете просто вызвать ее непосредственно в тестовом коде.Если вы используете пакет, который указанный в Imports в одном из ваших примеров или виньеток, вам нужно будет либо прикрепить пакет с помощью, library(package) либо использовать package::function().","code":""},{"path":"namespace---зависимости-пакета.html","id":"при-импорте-пакетов-через-поле-suggest","chapter":"Урок 6 NAMESPACE - Зависимости пакета","heading":"6.3.7.2 При импорте пакетов через поле Suggest","text":"В отличае от поля Imports, пакеты указанные в поле Suggest не обязательно будут установлены у конечного пользователя вашего пакета, в связи с чем вам необходимо делать дополнительные проверки на наличие их установки.В коде пакета, т.е. в папке R/ вы должны проверить наличие установленного пакета с помощью базовой функции requireNamespace(), или функций из пакета rlang: is_installed() и check_installed().В тестах вы можете использовать функцию testthat::skip_if_not_installed() для пропуска тестов, если у пользовтаеля не установлены необходимые для их выполнения пакетов.Для использования пакетов указанных в Suggest в виньетках или примерах функций используйте функции require() или requireNamespace(), для проверки доступен ли необходимый пакет.","code":"\n# Проверка установки пакета через базовую requireNamespace()\n## Проверка установлен ли пакет\nmy_fun <- function(a, b) {\n  if (!requireNamespace(\"aaapkg\", quietly = TRUE)) {\n    stop(\n      \"Package \\\"aaapkg\\\" must be installed to use this function.\",\n      call. = FALSE\n    )\n  }\n  # code that includes calls such as aaapkg::aaa_fun()\n}\n\n# Альтрнативный сценарий выполнения\nmy_fun <- function(a, b) {\n  if (requireNamespace(\"aaapkg\", quietly = TRUE)) {\n    aaapkg::aaa_fun()\n  } else {\n    g()\n  }\n}\n\n\n# С помощью пакета rlang\n## пакет указанный в Suggest обязателен для выполнения функции\nmy_fun <- function(a, b) {\n  rlang::check_installed(\"aaapkg\", reason = \"to use `aaa_fun()`\")\n  # code that includes calls such as aaapkg::aaa_fun()\n}\n\n## Функция с двумя альтернативными сценариями\nmy_fun <- function(a, b) {\n  if (rlang::is_installed(\"aaapkg\")) {\n    aaapkg::aaa_fun()\n  } else {\n    g()\n  }\n}\ntest_that(\"basic plot builds without error\", {\n  skip_if_not_installed(\"sf\")\n\n  nc_tiny_coords <- matrix(\n    c(-81.473, -81.741, -81.67, -81.345, -81.266, -81.24, -81.473,\n      36.234, 36.392, 36.59, 36.573, 36.437, 36.365, 36.234),\n    ncol = 2\n  )\n\n  nc <- sf::st_as_sf(\n    data_frame(\n      NAME = \"ashe\",\n      geometry = sf::st_sfc(sf::st_polygon(list(nc_tiny_coords)), crs = 4326)\n    )\n  )\n\n  expect_doppelganger(\"sf-polygons\", ggplot(nc) + geom_sf() + coord_sf())\n})\n#' @examples\n#' if (require(\"maps\")) {\n#'   nz <- map_data(\"nz\")\n#'   # Prepare a map of NZ\n#'   nzmap <- ggplot(nz, aes(x = long, y = lat, group = group)) +\n#'     geom_polygon(fill = \"white\", colour = \"black\")\n#'\n#'   # Plot it in cartesian coordinates\n#'   nzmap\n#' }"},{"path":"namespace---зависимости-пакета.html","id":"при-импорте-пакетов-через-поле-depends","chapter":"Урок 6 NAMESPACE - Зависимости пакета","heading":"6.3.7.3 При импорте пакетов через поле Depends","text":"В этом случае рекомендации будут примерно теже, что и при использовании поля Imports, единственное, что при использовании поля Depends указанные в нём пакеты автоматически импортируются, и экспортируются в рабочее окружение, в связи с чем при использовании их в примерах функций и виньетках нет необходимости подключать их повторно командой library().","code":""},{"path":"namespace---зависимости-пакета.html","id":"импорт-и-экспорт-s3-методов","chapter":"Урок 6 NAMESPACE - Зависимости пакета","heading":"6.3.8 Импорт и экспорт S3 методов","text":"Экспортируете основную дженерик функцию через директиву export()Регистрируете её методы написанные под обработку объектов различных классов с помощью директивы S3method()Ниже пример дженерик функции и метода под обработку data.frame с её помощью:Для их экспорта прописываются следующие директивы в файле NAMESPACE:","code":"\n#' ... all the usual documentation for count() ...\n#' @export\ncount <- function(x, ..., wt = NULL, sort = FALSE, name = NULL) {\n  UseMethod(\"count\")\n}\n\n#' @export\ncount.data.frame <- function(\n  x,\n  ...,\n  wt = NULL,\n  sort = FALSE,\n  name = NULL,\n  .drop = group_by_drop_default(x)) { ... }...\nS3method(count,data.frame)\n...\nexport(count)\n..."},{"path":"namespace---зависимости-пакета.html","id":"тест-4","chapter":"Урок 6 NAMESPACE - Зависимости пакета","heading":"6.4 Тест","text":"facebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":""},{"path":"разработка-юнит-тестов-к-функциям-пакета-пакет-testthat.html","id":"разработка-юнит-тестов-к-функциям-пакета-пакет-testthat","chapter":"Урок 7 Разработка юнит-тестов к функциям пакета (пакет testthat)","heading":"Урок 7 Разработка юнит-тестов к функциям пакета (пакет testthat)","text":"В этом видео мы разберёмся с тем, зачем покрывать код вашего пакета юнит-тестам, и как технически это реализовать.Данный урок основан на главах \"Testing basics\" книги \"R Packages (2e)\", под авторством Хедли Викхема и Дженни Брайан.","code":""},{"path":"разработка-юнит-тестов-к-функциям-пакета-пакет-testthat.html","id":"видео-6","chapter":"Урок 7 Разработка юнит-тестов к функциям пакета (пакет testthat)","heading":"7.1 Видео","text":"","code":""},{"path":"разработка-юнит-тестов-к-функциям-пакета-пакет-testthat.html","id":"тайм-коды-6","chapter":"Урок 7 Разработка юнит-тестов к функциям пакета (пакет testthat)","heading":"7.1.1 Тайм коды","text":"00:00 Вступление\n00:54 Неформальный процесс тестирования\n03:10 Рабочий процесс тестирования\n05:44 Настройка проекта пакета для тестирования\n08:34 Как создать файл тестирования для функции\n10:36 Как организованы файлы тестирования\n15:16 Функции-ожидания, семейство expect_*()\n20:07 Запуск тестов\n23:41 Snapshot тесты\n28:41 Управление Snapshot тестами\n31:02 Заключение","code":""},{"path":"разработка-юнит-тестов-к-функциям-пакета-пакет-testthat.html","id":"презентация-6","chapter":"Урок 7 Разработка юнит-тестов к функциям пакета (пакет testthat)","heading":"7.2 Презентация","text":"","code":""},{"path":"разработка-юнит-тестов-к-функциям-пакета-пакет-testthat.html","id":"конспект-6","chapter":"Урок 7 Разработка юнит-тестов к функциям пакета (пакет testthat)","heading":"7.3 Конспект","text":"","code":""},{"path":"разработка-юнит-тестов-к-функциям-пакета-пакет-testthat.html","id":"неформальный-процесс-тестирования-пакета","chapter":"Урок 7 Разработка юнит-тестов к функциям пакета (пакет testthat)","heading":"7.3.1 Неформальный процесс тестирования пакета","text":"Обычно при разработке пакета вы в любом случае тестируюете свои функции, но наверняка идёте по следующему сценарию:Добавляете в пакет новую функциюЗагружаете весь функционал пакета с помощью devtools::load_all()В ручном режиме тестируете новую функцию в консолиВ случае ошибки вносите изменения и повторяете итерациюЭтот подход конечно работает, вы действительно проверяете свою функцию на соответвие вашим ожиданиям от полученного в результате её работы рехультату. Проблема этого подхода заключается в том, что если спустя несколько месяцев вы вернётесь к разработке своего пакета, измените его код, то вам повторно прийдётся проводить все эти тесты в консоли в ручном режиме. При этом наверняка большую часьт тестов вы к тому времени уже забудете, это займёт много времени, и в целом является не эффективным подходом.намного эффективнее будет один раз написать все тесты, и в дальнейшем просто запускать их по мере доработки функционала пакета. Такой подход называет юнит-тестированием, или модульным тестированием, о нём в этом уроке и пойдёт речь.","code":""},{"path":"разработка-юнит-тестов-к-функциям-пакета-пакет-testthat.html","id":"рабочий-процесс-добавления-тестов-в-пакет","chapter":"Урок 7 Разработка юнит-тестов к функциям пакета (пакет testthat)","heading":"7.3.2 Рабочий процесс добавления тестов в пакет","text":"Весь процесс создания и использования тестов состоит из трёх основных шагов:С помощью функции usethis::use_testthat(3) настройте ваш пакет для тестирования:При запуске будет создан каталог tests/testthat/;В поле Suggests файла DESCRIPTION будет добавлен пакет testthat;Создастся файл tests/testthat.R, который отвечает за запуск ваших тестов.Создание функций и тестов к ним осуществляется двумя функциями:usethis::use_r() – создаёт файл будущей функции в каталоге R/;usethis::use_test() – создаёт файл test-function_name.R с тестами для функции в каталоге tests/testthat/.Запуск тестов осуществляется функцией devtools::test().","code":""},{"path":"разработка-юнит-тестов-к-функциям-пакета-пакет-testthat.html","id":"организация-тестов","chapter":"Урок 7 Разработка юнит-тестов к функциям пакета (пакет testthat)","heading":"7.3.3 Организация тестов","text":"Файлы с тестами, находящиеся в каталоге tests/testthat/ должны быть организованы следующим образом:Файл содержит несколько связанных тестов.Тест объединяет несколько ожиданий для проверки выходных данных простой функции, диапазона возможностей для одного параметра более сложной функции или тесно связанныx нескольких функций. Тест создается с помощью test_that(desc, code), где:\ndesc - краткое описание теста. Отчет о сбое теста включает это описание, поэтому вам нужно краткое изложение цели теста, например, конкретного поведения.\ncode – код теста, который зачастую состоит из ожиданий\ndesc - краткое описание теста. Отчет о сбое теста включает это описание, поэтому вам нужно краткое изложение цели теста, например, конкретного поведения.code – код теста, который зачастую состоит из ожиданийОжидание — это атом тестирования. Он описывает ожидаемый результат вычисления: имеет ли он правильное значение и правильный класс? Выдает ли он ошибку, когда должен? Функции ожиданий имеют префикс expect_*()Соответвенно изначально мы запускаем функцию usethis::use_testthat(3) для настройки нашего пакета.В этом уроке мы немного доработали пакет, разработку которого рассматривали в самом первом уроке, а именно в функционал пакета был добавлен новый оператор %/%, который позволяет разбивать строки по разделителю.Ниже приведён код этоо оператора:Код этой функции сохранён в файле R/str_split.R, с помощью команды usethis::use_test('str_split.R') мы создаём привязанный к функции файл тестирования, и длбавляем в него 5 тестов:Данный файл состоит из 4 тестов, и 5 ожиданий. Первый аргумент функции test_that является описанием теста, т.е. какой функционал этот тест проверяет, вторым аргументом мы добавляем ожидания. В свою очередь почти все ожидания состоят из двух обязательных аргумент object - результат выполнения кода, который мы тестируем и expected - какой результат мы ожидаем получить в результате указанного в первом аргументе кода, и разного набора дополнительных аргументов, в зависимости от специфики ожидания.","code":"\n#' Split\n#'\n#' @param x string\n#' @param y pattern\n#'\n#' @return\n#' @export\n\"%/%\" <- function(x, y) {\n\n  if (nchar(y) >= nchar(x)) stop(\"Pattern for spliting longer than string\")\n  if (!grepl(y, x, fixed = T)) stop(\"Pattern is not included in the specified string\")\n  out <- strsplit(x, y, fixed = T)[[1]]\n\n  cli::cli_alert_info('The string is split into {length(out)} parts')\n\n  out\n\n}\ntest_that(\"test split value\", {\n  expect_equal(\"one two three\" %/% \" \", c(\"one\", \"two\", \"three\"))\n})\n\ntest_that(\"test split length\", {\n  expect_length(\"one two three\" %/% \" \", 3)\n})\n\ntest_that(\"test class of splited obj\", {\n  expect_type(\"one two three\" %/% \" \", 'character')\n})\n\ntest_that('test errors', {\n  expect_error(\"one two\" %/% \"one two three\", regexp = 'spliting longer')\n  expect_error(\"one two\" %/% \"three\", regexp = 'not included')\n})"},{"path":"разработка-юнит-тестов-к-функциям-пакета-пакет-testthat.html","id":"ожидания","chapter":"Урок 7 Разработка юнит-тестов к функциям пакета (пакет testthat)","heading":"7.3.4 Ожидания","text":"Пакет testthat сожержит более 40 различных функций-ожиданий. Ниже перечислю основные:expect_equal(), expect_identical() - Возвращает ли код ожидаемое значение?expect_type(), expect_s3_class(), expect_s4_class() - Возвращает ли код объект, унаследованный от ожидаемого базового типа, класса S3 или класса S4?expect_error(), expect_warning(), expect_message(), expect_condition() - Выдает ли код ошибку, предупреждение, сообщение или другое условие?expect_length() - Возвращает ли код вектор указанной длины?expect_lt(), expect_lte(), expect_gt(), expect_gte() - Возвращает ли код число больше/меньше ожидаемого значения?expect_named() - Возвращает ли код вектор с (заданными) именами?Функции ожидания вы вполне можете использовать интерактивно:Отдельно стоит обратить внимание на второй аргумент, который мы используем в функции expect_error(), данный аргумент не является обязательным, но крайне рекомендуется к использования. Дело в том, что по умолчанию функция expect_error() всего лишь проверяет, что указанный в первом аргументе код завершается ошибкой, но не проверяет какой именно, если не использовать её дополнительные аргументы. Так, например, этот тест может ошибочно быть успешно выполнен если вы просто опечатались в названии функции, которую тестировали.","code":"\nlibrary(testthat)\n\n# ожидания\nexpect_equal(10, 10 + 1e-7)     # не строгое соответствие\nexpect_identical(10, 10 + 1e-7) # строгое соответствие\n\n# проверка на ошибки\nexpect_error(1 / \"a\")\nexpect_warning(log(-1))\n\n# тест возвращает ошибку, но не ту, которую мы проверяем\n# изза опечатки в названии функции\nstringr::str_duq(1:2, 1:3)\nstringr::str_dup(1:2, 1:3)\n\nexpect_error(stringr::str_duq(1:2, 1:3))\nexpect_error(stringr::str_duq(1:2, 1:3), regexp = \"recycle\")\nexpect_error(stringr::str_dup(1:2, 1:3), regexp = \"recycle\")\nexpect_error(str_dup(1:2, 1:3), class = \"vctrs_error_incompatible_size\")"},{"path":"разработка-юнит-тестов-к-функциям-пакета-пакет-testthat.html","id":"запуск-тестов","chapter":"Урок 7 Разработка юнит-тестов к функциям пакета (пакет testthat)","heading":"7.3.5 Запуск тестов","text":"Т.к. наша новая функция теперь покрыта тестами мы можем их запустить командой devtools::test(), результаты работы будут выглядеть следующим образом:В данном случае все наши тесты были пройдены успешно, давайте намеряно попробуем допустить какую то ошибку, и ещё раз запустим тестирование:","code":"══ Results ══════════════════════════════════\nDuration: 0.4 s\n\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 5 ]ℹ Testing firstpackage\n✔ | F W S  OK | Context\n⠏ |         0 | str_split                                                                                                                                         i The string is split into 3 parts\ni The string is split into 3 parts\ni The string is split into 3 parts\n✖ | 1       4 | str_split [0.1s]                                                                                                                                  \n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\nFailure (test-str_split.R:6:3): test split length\n\"one two three\"%/%\" \" has length 3, not length 5.\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n\n══ Results ══════════════════════════════════\nDuration: 0.4 s\n\n[ FAIL 1 | WARN 0 | SKIP 0 | PASS 4 ]"},{"path":"разработка-юнит-тестов-к-функциям-пакета-пакет-testthat.html","id":"как-читать-результаты-теста","chapter":"Урок 7 Разработка юнит-тестов к функциям пакета (пакет testthat)","heading":"7.3.6 Как читать результаты теста","text":"В примере выше, изначально стоит обратить внимание на последнюю строку, в которой мы видим:FAIL 1 - количество проваленых тестов, в нашем случае 1WARN 0 - количество тестов с предупреждениямиSKIP 0 - количество пропущенных тестов, например изза функции test::skip_if_not_installed()PASS 4 - количество успешно пройденых тестовНемного выше вы найдете более подробную информацию о проваленом тесте:Failure (test-str_split.R:6:3) - в каком тестовом файле был проваленный тест, и в какой строке этого фалйа была ошибкаtest split length - описание того, что проваленный тест проверяет, первый аргумент функции test_that()\"one two three\"%/%\" \" - какой код тестировалсяhas length 3, length 5. - отличие полученного результата от ожидаемого","code":""},{"path":"разработка-юнит-тестов-к-функциям-пакета-пакет-testthat.html","id":"snapshot-тесты","chapter":"Урок 7 Разработка юнит-тестов к функциям пакета (пакет testthat)","heading":"7.3.7 Snapshot тесты","text":"","code":""},{"path":"разработка-юнит-тестов-к-функциям-пакета-пакет-testthat.html","id":"создание-snapshot-теста","chapter":"Урок 7 Разработка юнит-тестов к функциям пакета (пакет testthat)","heading":"7.3.7.1 Создание snapshot теста","text":"Этот функционал был добавлен в testthat версии 3.0.0.Snapshot тесты запоминают вывод, который был в консоли при первом его выполнении, и в будущем сравнивают текущий вывод полученный при запуске тестов, с зафиксированным при первом запуске значениям. Этот тип тестов работает только в пакетном (не интерактивном) режиме работы, т.е. их можно запустить командой devtools::test() или devtools::test_file().При первом запуске создаётся папка tests/testthat/_snaps/ в которую и будут собираться снимки вывода результата работы функции в виде .md файлов.\nПри каждом следующем запуске теста, вывод работы функции будет сравниваться с созданным ранее эталоном.Добавим snapshot тест в нашу новую функцию:При первом запуске этого тест создаётся файл tests/testthat/_snaps/str_split.md, который выглядит следующим образом:Этот файл теперь являеться эталоном для сверки при всех следующих запусках теста. Он проверяет и результат, который возвращает функция, и вывод сообщений в консоль.","code":"\n# snapshot test -----------------------------------------------------------\ntest_that(\"test str split output\", {\n  expect_snapshot(\n    \"Alexey Seleznev\" %/% \" \"\n  )\n})# test str split output\n\n    Code\n      \"Alexey Seleznev\" %/% \" \"\n    Message <cliMessage>\n      i The string is split into 2 part\n    Output\n      [1] \"Alexey\"   \"Seleznev\"\n\n"},{"path":"разработка-юнит-тестов-к-функциям-пакета-пакет-testthat.html","id":"управление-snapshot-тестов","chapter":"Урок 7 Разработка юнит-тестов к функциям пакета (пакет testthat)","heading":"7.3.7.2 Управление snapshot тестов","text":"Мы уже выяснили, что при первом запуске snapshot теста создаётся эталонный снимок результата, и все остальные запуски теста с ним сравниваются, но что делать если мы поняли, что при первом запуске была допущена какая то ошибка. Например в нашем случае функция после разбиения строки на подстроки выводит в консоль сообщение, о том что строка была успешно разбита на опрелённое количество частей - string split 2 part, но мы опечатались, и слово part написали в единственном числе, после чего нам надо изменить сообщение в функции и пересоздать эталонный снимок.Для этого мы вносим измение в функцию, исправив опечатку, далее запускаем тестирование, получаем сообщение об ошибке:Я намеренно добавил этот вывод консоли скриншотом, что бы вы увидели, что консоль выделяет зелёным цветом то, что несоответвывало эталонному снимку при запуске тестирования.Получается функцию мы исправили, но теперь нам необходимо обновить снимок, сделать это можно с помощью следующих функций:Команда testthat::snapshot_review() запускает Shiny приложение для локального просмотра отличия в выводе функции, по сравнению с эталоном.Команда testthat::snapshot_accept() позволяет обновить эталонный снимок теста.Т.е. далее команда testthat::snapshot_accept() просто обновит ваш эталонный снимок, а команда testthat::snapshot_review() позволит более детально изучить что пошло не так с помощью небольшого Shiny приложения:В приложении более подробно выделено то, что не соответвует при тесте эталонному снимку. Нажав кнопку Skip вы оставляете прежный эталонный снимок, нажав кнопку Accept вы внесёте в него изменения.","code":""},{"path":"разработка-юнит-тестов-к-функциям-пакета-пакет-testthat.html","id":"задание-1","chapter":"Урок 7 Разработка юнит-тестов к функциям пакета (пакет testthat)","heading":"7.4 Задание","text":"В этом уроке вместо теста будет задание:Клонируйте репозиторий с пакетом firstpackage:\nВ RStudio меню file -> New Project ... -> Version Control -> Git -> New Project Wizard, заполните следующие поля\nRepository URL: https://github.com/selesnow/firstpackage.git\nProject directory name: firstpackage\nCreate project subdirectory : Тут укажите путь, по которому будет создан проект с пакетом firstpackage\n\nВ RStudio меню file -> New Project ... -> Version Control -> Git -> New Project Wizard, заполните следующие поля\nRepository URL: https://github.com/selesnow/firstpackage.git\nProject directory name: firstpackage\nCreate project subdirectory : Тут укажите путь, по которому будет создан проект с пакетом firstpackage\nRepository URL: https://github.com/selesnow/firstpackage.gitProject directory name: firstpackageCreate project subdirectory : Тут укажите путь, по которому будет создан проект с пакетом firstpackageПосле чего у вас откроется RStudio с пакетом firstpackage, далее вам необходимо:\nНастройте пакет для добавления тестов\nСоздайте файл тестирования к оператору %+%, файл с кодом которого лежит по пути R/str_plus.R, добавьте следующие тесты для этого оператора:\nПроверьте что код \"\" %+% \"little\" %+% \"string\" возвращал вектор длинны 1;\nПроверьте что код \"\" %+% \"little\" %+% \"string\" возвращал объект класса character;\nДобавьте проверку что код \"\" %+% \"little\" / 7 возвращает ошибку, которая в своём сообщении содержит текст non-numeric argument binary operator.\n\nСоздайте файл тестирования к оператору %/%, файл с кодом которого лежит по пути R/str_split.R, добавьте следующие тесты для этого оператора:\nПроверьте что код '-little-text' %/% \"-\" возвращает вектор из слов , little, text;\nПроверьте что код '-little-text' %/% \"-\" вощвращает вектор длинны 3;\n\nЗапустите ваши тесты, вы должны получить описанный ниже результат:\nНастройте пакет для добавления тестовСоздайте файл тестирования к оператору %+%, файл с кодом которого лежит по пути R/str_plus.R, добавьте следующие тесты для этого оператора:\nПроверьте что код \"\" %+% \"little\" %+% \"string\" возвращал вектор длинны 1;\nПроверьте что код \"\" %+% \"little\" %+% \"string\" возвращал объект класса character;\nДобавьте проверку что код \"\" %+% \"little\" / 7 возвращает ошибку, которая в своём сообщении содержит текст non-numeric argument binary operator.\nПроверьте что код \"\" %+% \"little\" %+% \"string\" возвращал вектор длинны 1;Проверьте что код \"\" %+% \"little\" %+% \"string\" возвращал объект класса character;Добавьте проверку что код \"\" %+% \"little\" / 7 возвращает ошибку, которая в своём сообщении содержит текст non-numeric argument binary operator.Создайте файл тестирования к оператору %/%, файл с кодом которого лежит по пути R/str_split.R, добавьте следующие тесты для этого оператора:\nПроверьте что код '-little-text' %/% \"-\" возвращает вектор из слов , little, text;\nПроверьте что код '-little-text' %/% \"-\" вощвращает вектор длинны 3;\nПроверьте что код '-little-text' %/% \"-\" возвращает вектор из слов , little, text;Проверьте что код '-little-text' %/% \"-\" вощвращает вектор длинны 3;Запустите ваши тесты, вы должны получить описанный ниже результат:facebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":"ℹ Testing firstpackage\n✔ | F W S  OK | Context\n✔ |         3 | str_plus                                                                                                                                          \n⠏ |         0 | str_split                                                                                                                                         i The string is split into 3 parts\ni The string is split into 3 parts\n✔ |         2 | str_split\n\n══ Results ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════\nDuration: 0.3 s\n\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 5 ]\n\nWoot!"},{"path":"написание-документации-к-функциям-пакета.html","id":"написание-документации-к-функциям-пакета","chapter":"Урок 8 Написание документации к функциям пакета","heading":"Урок 8 Написание документации к функциям пакета","text":"Этим уроком мы начинаем обширную тему документации вашего пакета. В этом видео мы разберёмся с тем, как добавить документацию к функциям пакета с помощью специальных комментариев и пакета roxygen2.Данный урок основан на главе \"Function documentation\" книги \"R Packages (2e)\", под авторством Хедли Викхема и Дженни Брайан.","code":""},{"path":"написание-документации-к-функциям-пакета.html","id":"видео-7","chapter":"Урок 8 Написание документации к функциям пакета","heading":"8.1 Видео","text":"","code":""},{"path":"написание-документации-к-функциям-пакета.html","id":"тайм-коды-7","chapter":"Урок 8 Написание документации к функциям пакета","heading":"8.1.1 Тайм коды","text":"00:00 Вступление\n00:43 Какие компоненты пакета отвечают за документацию функций\n01:31 Рабочий процесс\n04:47 Структура roxygen комментариев\n05:34 Особенности разметки roxygen комментариев\n07:10 Из каких разделов состоит документация к функциям пакета\n09:06 Title, Description и Details\n12:07 Документирование аргументов функции\n14:55 Возвращаемое функцией значение\n16:42 Примеры использования функции\n20:12 Повторное использование документации\n22:23 Документация уровня пакета\n23:50 Заключение","code":""},{"path":"написание-документации-к-функциям-пакета.html","id":"презентация-7","chapter":"Урок 8 Написание документации к функциям пакета","heading":"8.2 Презентация","text":"","code":""},{"path":"написание-документации-к-функциям-пакета.html","id":"конспект-7","chapter":"Урок 8 Написание документации к функциям пакета","heading":"8.3 Конспект","text":"","code":""},{"path":"написание-документации-к-функциям-пакета.html","id":"рабочий-процесс-1","chapter":"Урок 8 Написание документации к функциям пакета","heading":"8.3.1 Рабочий процесс","text":"Рабочий процесс по добавлению документации к функциям состоит из следующих этапов:Добавляете roxygen2 комментарии над объектами, к которым хотите сгенерировать документацию (Ctrl+Shift+Alt+R когда курсор находится внутри кода функции или кода генерирующего объект)Запускаете devtools::document() (Ctrl/Cmd + Shift + D), чтобы преобразовать комментарии roxygen2 в .Rd файлы.Запускаете предварительный просмотрт сгенерированной документации с помощью ?function_name.Исправляете ошибки, повторяете процесс до тех пор, пока не получите нужный результат.","code":""},{"path":"написание-документации-к-функциям-пакета.html","id":"структура-roxygen-комментариев","chapter":"Урок 8 Написание документации к функциям пакета","heading":"8.3.2 Структура roxygen комментариев","text":"Например, для нашего оператора %+%, который мы с вами добавили в пакет ещё в первом уроке, можно добавить следующие roxygen комментарии для генерации документации:roxygen комментарии имеют следующие структуру:Комментарии roxygen2 начинаются с #'Все комментарии roxygen2, предшествующие функции называются блокомБлоки разбиваются на теги , которые выглядят как @tagName tagValueПо умолчанию каждый блок генерирует один топик документации , т.е. один .Rd файл в man/ каталоге.","code":"#' Concatenate Strings\n#'\n#' Operator for concatenate two strings.\n#'\n#' Use `%+%` operator for join two or more strings\n#' @section Main:\n#' The main ......\n#' @param x Character, first string\n#' @param y Character, second string\n#'\n#' @returns A character vector with lenght 1\n#' @export\n#'\n#' @examples\n#' # two values\n#' \"first\" %+% \"second\"\n#'\n#' # three values\n#' \"first\" %+% \"second\" %+% \"three\""},{"path":"написание-документации-к-функциям-пакета.html","id":"особенности-разметки-.rd-файлов","chapter":"Урок 8 Написание документации к функциям пакета","heading":"8.3.3 Особенности разметки .Rd файлов","text":"Используйте апострофы для выделения блока текста как кода: #' like \\thisfunction()`, great`.Для добавление ссылки на документацию к другой функции вашего или стороннего пакета используйте квадратные скобки:Ссылайтесь на виньетки с помощью кода: vignette(\"rd-formatting\", package = \"roxygen2\")Маркированные списки прописываются так же, как и в обычном markdown:","code":"#' It's obvious that `thisfunction()` is better than [otherpkg::otherfunction()]\n#' or even our own [olderfunction()].#' Best features of `thisfunction()`:\n#' * Smells nice\n#' * Has good vibes"},{"path":"написание-документации-к-функциям-пакета.html","id":"разделы-документации","chapter":"Урок 8 Написание документации к функциям пакета","heading":"8.3.4 Разделы документации","text":"Заголовок (@title) – Обычно задаётся позиционно в первой строке roxygen комментарияОписание (@description) – Более подробное описание, что делает ваша функция, можно задать позиционно, второй строкой roxygen комментарияДетали (@details) – Тут описывают важные детали использования вашей функций, можно задать позиционно третей строкой комментарияАргументы функции (@param) – Описание каждого аргумента функцииВозвращаемое значение (@return) – Какой объект возвращает ваша функцияПримеры (@examples) – Примеры использования вашей функции","code":""},{"path":"написание-документации-к-функциям-пакета.html","id":"title-description-и-details","chapter":"Урок 8 Написание документации к функциям пакета","heading":"8.3.4.1 Title, description и details","text":"Первые 3 тега roxygen можно использовать позиционно, без указания их названий:Title – заголовок должен быть написан в регистре заголовков, не заканчиваться точкой и после него должна идти пустая строка.Description – более подробное описание того, что делает функция, как правило занимает один абзац. Если ваше описание требует более чем один абзац вам придётся явно использовать тег.1Details – описание деталей работы вашей функции, в осном этот блок не используется в документации. Хорошей практикой является создание пользовательских разделов подробностей с помощью тега @section.","code":""},{"path":"написание-документации-к-функциям-пакета.html","id":"аргументы","chapter":"Урок 8 Написание документации к функциям пакета","heading":"8.3.4.2 Аргументы","text":"Для документирования аргументов функции используйте тег @paramЕсли использование нескольких аргументов тесно связано между собой можете объединить их через запятую, без указания пробела: #' @param x,y pair character vectors.Тег @inheritParams позволяет наследовать описание аргументов из других функций вашего или даже стороннего пакета. При этом будут унаследованы только те аргументы, которые присутвуют в новой функции, и которые в ней отдельно не были задокументированы.","code":""},{"path":"написание-документации-к-функциям-пакета.html","id":"возвращаемое-значение","chapter":"Урок 8 Написание документации к функциям пакета","heading":"8.3.4.3 Возвращаемое значение","text":"За возвращаемое значение отвечает тег @returns. Для возвращаемого значения вам необходимо описать класс, тип и размер возвращаемого функцией значения.","code":""},{"path":"написание-документации-к-функциям-пакета.html","id":"примеры","chapter":"Урок 8 Написание документации к функциям пакета","heading":"8.3.4.4 Примеры","text":"Примеры описываются с использованием тега @examplesВсе прописанные примеры должны выполняться без ошибок, поскольку они регулярно проверяются:\nВ интерактивном режиме с помощью команды example()\nВо время работы R CMD check на вашем компьютере\nВо время проверки R CMD check на CRAN.\nКогда генерируется веб-сайт вашего пакета с помощью pkgdown\nВ интерактивном режиме с помощью команды example()Во время работы R CMD check на вашем компьютереВо время проверки R CMD check на CRAN.Когда генерируется веб-сайт вашего пакета с помощью pkgdownПри использовании нестабильных ресурсов в ваших примерах, например веб-сайтах используйте тег @examplesIf, который позволяет пропускать такие примеры, так же можно завернуть ваши примеры в \\dontrun{}, для избегания запуска примеров, которые заведомо заканчиваются ошибками.Примеры использования \\dontrun{} и @examplesIf можно подсмотреть в коде пакета googledrive:Пример \\dontrun{} используется в функции drive_find:@examplesIf используется в функции drive_publish:В данном случае с помощью функции drive_has_token() мы проверяем есть ли кеш авторизационных данных, для доступа к данным, если учётные данные доступны то примеры выполняются, если не доступны то нет.","code":"\n#' @examples\n#' \\dontrun{\n#' # list \"My Drive\" w/o regard for folder hierarchy\n#' drive_find()\n#'\n#' # filter for folders, the easy way and the hard way\n#' drive_find(type = \"folder\")\n#' drive_find(q = \"mimeType = 'application/vnd.google-apps.folder'\")\n#'\n#' # filter for Google Sheets, the easy way and the hard way\n#' drive_find(type = \"spreadsheet\")\n#' drive_find(q = \"mimeType='application/vnd.google-apps.spreadsheet'\")\n#'\n#' }\n#'\n#' @examplesIf drive_has_token()\n#' # Create a file to publish\n#' file <- drive_example_remote(\"chicken_sheet\") %>%\n#'   drive_cp()\n#'\n#' # Publish file\n#' file <- drive_publish(file)\n#' file$published\n#'\n#' # Unpublish file\n#' file <- drive_unpublish(file)\n#' file$published\n#'\n#' # Clean up\n#' drive_rm(file)"},{"path":"написание-документации-к-функциям-пакета.html","id":"объединить-документацию-к-нескольким-функциям-в-один-файл","chapter":"Урок 8 Написание документации к функциям пакета","heading":"8.3.5 Объединить документацию к нескольким функциям в один файл","text":"Документацию к нескольким близким по функционалу функциям имеет смысл объединить в один файл документации, сделать это можно с помощью тега @rdname. Например в пакете stringr в один файл объеденена документация к функциям str_length() и str_width():Изначально общее описание документации обеих функций мы привязываем к функции str_length():Далее используем в функции str_width() тег @rdname для её объединения с str_length():","code":"#' The length/width of a string\n#'\n#' @description\n#' `str_length()` returns the number of codepoints in a string. These are\n#' the individual elements (which are often, but not always letters) that\n#' can be extracted with [str_sub()].\n#'\n#' `str_width()` returns how much space the string will occupy when printed\n#' in a fixed width font (i.e. when printed in the console).\n#'\n#' ...\nstr_length <- function(string) {\n  ...\n}#' @rdname str_length\nstr_width <- function(string) {\n  ...\n}"},{"path":"написание-документации-к-функциям-пакета.html","id":"повторное-использование-документации","chapter":"Урок 8 Написание документации к функциям пакета","heading":"8.3.6 Повторное использование документации","text":"При необходимости объединить документацию нескольких функций в один файл документации используйте тег @rdname, и передайте в него название функции, в которой подробно описана документация всех функций.Теги отвечающие за наследование частей документации:@inherit source_function - унаследует все поддерживаемые компоненты от source_function().@inheritSection source_function Section title - унаследует один раздел с заголовком «Section title» от source_function().@inheritDotParams - автоматически генерирует документацию по параметрам для ... общего случая, когда вы переходите ... к другой функции.Пример из пакета stringr, в котором практически в каждой функции доступны оноимённые аргументы string и pattern. Прописывать их отдельно для каждой функции не удобно, поскльку при необходимости внести в описание этих аргументов изменения, нам бы пришлось их руками вносить практически во все фукции пакета, поэтому в одной функции, в нашем случае str_length() мы прописали описание этих аргументов, а в других функциях мы их можем переиспользовать:Описание аргументов в функции str_length():Далее с помощью тега @inheritParams в других функциях, например str_match()При этом унаследованы будут только те аргументы, которые присутвуют в новой функции, и не задокументированы в ней. В примере выше мы унаследуем описание аргумента string, но переопределяем описание аргумента pattern.","code":"#' @param string Input vector. Either a character vector, or something\n#'  coercible to one.\n#' @param pattern Pattern to look for.\n#'\n#'   The default interpretation is a regular expression, as described in\n#'   `vignette(\"regular-expressions\")`. Use [regex()] for finer control of the\n#'   matching behaviour.\n#'\n#'   Match a fixed string (i.e. by comparing only bytes), using\n#'   [fixed()]. This is fast, but approximate. Generally,\n#'   for matching human text, you'll want [coll()] which\n#'   respects character matching rules for the specified locale.\n#'\n#'   Match character, word, line and sentence boundaries with\n#'   [boundary()]. An empty pattern, \"\", is equivalent to\n#'   `boundary(\"character\")`.#' @inheritParams str_detect\n#' @param pattern Unlike other stringr functions, `str_match()` only supports\n#'   regular expressions, as described `vignette(\"regular-expressions\")`.\n#'   The pattern should contain at least one capturing group."},{"path":"написание-документации-к-функциям-пакета.html","id":"раздел-справки-по-пакету","chapter":"Урок 8 Написание документации к функциям пакета","heading":"8.3.7 Раздел справки по пакету","text":"Используйте функцию usethis::use_package_doc() для генерации файла R/{pkgname}-package.R, который содердит документацию уровня пакета. Так же это хорошее место для хранения импорта, т.е. тегов @import и @importFrom. Данный файл по умолчанию будет иметь следующий вид:","code":"#' @keywords internal \n\"_PACKAGE\"\n\n# The following block is used by usethis to automatically manage\n# roxygen namespace tags. Modify with care!\n## usethis namespace: start\n#' @importFrom glue glue_collapse\n## usethis namespace: end\nNULL"},{"path":"написание-документации-к-функциям-пакета.html","id":"тест-5","chapter":"Урок 8 Написание документации к функциям пакета","heading":"8.4 Тест","text":"facebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":""},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"виньетки-и-прочая-опциональная-документация-пакета","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"Урок 9 Виньетки и прочая опциональная документация пакета","text":"В этом уроке мы разберёмся с опциональной документацией уровня пакета:Виньетки - Статьи, подробно описывающие в свободной форме функционал пакета;README - Общее описание цели пакета и нескольких простых примеров его использования;NEWS - Файл в котором фиксируются все изменения вашего пакета.Данный урок основан на следующих материалах: Глава \"Vignettes\" книги \"R Packages (2e)\", под авторством Хедли Викхема и Дженни Брайан.Глава \"markdown files\" книги \"R Packages (2e)\", под авторством Хедли Викхема и Дженни Брайан.Раздел \"Text Formatting R Markdown\" книги R Programming: Zero Pro, под авторством Ян Фэн и Цзянань ЧжуРаздел \"Chunk options package options\" с сайта пакета knitr, автор Ихуэй Се","code":""},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"видео-8","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"9.1 Видео","text":"","code":""},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"тайм-коды-8","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"9.1.1 Тайм коды","text":"00:00 Вступление\n00:52 Что такое виньетки\n01:45 Рабочий процесс создания виньеток\n07:29 Метаданные виньетки\n08:32 Разметка текста в Rmarkdown\n14:24 Как добавить график в виньетку\n16:19 Как добавить таблицу в виньетку\n23:03 Опции чанков\n28:01 Хранение исходников виньеток\n28:47 Файл README\n33:20 Файл NEWS\n37:44 Заключение","code":""},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"презентация-8","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"9.2 Презентация","text":"","code":""},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"конспект-8","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"9.3 Конспект","text":"","code":""},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"виньетки","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"9.3.1 Виньетки","text":"Виньетка – Свободный тип документации пакета, в котором подробно разобрано как использовать ваш пакет для рещения какой то конкретной задачи.","code":""},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"рабочий-процесс-2","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"9.3.1.1 Рабочий процесс","text":"Используйте функцию usethis::use_vignette(\"-vignette\"), которая сделает следующее:\nСоздаст каталог vignettes/\nРедактирует файл DESCRIPTION, в поле Suggests добавляя пакеты Knitr и Rmarkdown\nГенерирует виньетку vignettes/-vignette.Rmd\nДобавляет некоторые шаблоны в файл .gitignore гарантирующие, что файлы, созданные в результате предварительного просмотра ваших виньеток, останутся вне системы контроля версий.\nСоздаст каталог vignettes/Редактирует файл DESCRIPTION, в поле Suggests добавляя пакеты Knitr и RmarkdownГенерирует виньетку vignettes/-vignette.RmdДобавляет некоторые шаблоны в файл .gitignore гарантирующие, что файлы, созданные в результате предварительного просмотра ваших виньеток, останутся вне системы контроля версий.Наполните вашу виньетку контентом.Периодически рендите вашу виньетку с помощью devtools::build_rmd(\"vignettes/-vignette.Rmd\"), и смотрите, что получается. Другие способы рендинга будут использовать не разрабатываемую версию вашего пакета, а ту которая была уже установлена в основную библиотеку.Повторяйте все шаги пока не получите нужный вам результат.Виньетки состоят из метаданных, текста и блоков кода, далее рассмотрим эти составляющие более подробно.","code":""},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"метаданные-виньетки","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"9.3.1.2 Метаданные виньетки","text":"Метаданные хранятся в YAML заголовках виньетки:title - это заголовок, который появляется в виньетке. При редактировании этого поля, обязательно внесите такие же изменения в VignetteIndexEntry{}. Они должны быть одинаковыми, но, к сожалению, это не происходит автоматически.output - формат вывода. Существует множество вариантов, но rmarkdown::html_vignette разработан специально для создания виньеток.vignette - блок специальных метаданных, необходимых R. Единственная запись, которую вам, возможно, придется изменить, — это файл \\VignetteIndexEntry{}.author – автор виньетки.date – дата обновления виньетки.","code":""},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"особенности-rmarkdown-разметки","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"9.3.1.3 Особенности Rmarkdown разметки","text":"","code":""},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"разметка-текста","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"9.3.1.3.1 Разметка текста","text":"# Header1 – Заголовки*italic* - Курсив**bold** - Жирный шрифт`1 + 1` - Моноширинный шрифт`\\r 1 + 1` - Исполняемый inline код (обратный слеш перед r не нужен, я просто не нашел способа правильно экранировать эту конструкцию.)[r02pro](https://r02pro.github.io/) – Ссылка^[] - Сноска","code":""},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"списки","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"9.3.1.3.2 Списки","text":"Сиски бывают маркированные и нумероанные, ниже пример их создания:Маркерованный список:Нумерованный список:","code":"* Item 1\n* Item 2\n    + Item 2a\n        - Item 2a.a\n        - Item 2a.b\n    + Item 2b\n* Item 3\n    + Item 3a1. uno                                           \n2. dos                                            \n    2.1. dos.uno  \n    2.2. dos.dos  \n3. tres                                            \n    3.1. tres.uno  \n    3.2. tres.dos"},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"как-добавить-в-виньетку-график","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"9.3.1.3.3 Как добавить в виньетку график","text":"График добавляется с помощью блока кода построения графика, ниже пример с использованием ggplot2:","code":""},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"как-добавить-в-виньетку-таблицы","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"9.3.1.3.4 Как добавить в виньетку таблицы","text":"Таблицы добавляются аналогично графику в блоках исполняемого кода. Для построения таблиц вы можете использоваьт функцию knitr::kable(), либо функционал других пакетов: DT, htmlTable, gt, kableExtra. Для построения таблиц вам необходимо передать датафрейм в функцию преобразования датафрейма в html таблицу.Ниже небольшой пример построения таблиц:kable()htmlTableskableExtraDTgtКак по мне наиболее функциональные таблицы получаются с использованием пакета DT.","code":"\nknitr::kable(mtcars)\nhtmlTable::htmlTable(mtcars)\nlibrary(kableExtra)\n#> Warning: package 'kableExtra' was built under R version\n#> 4.3.1\n\nkbl(mtcars) %>% \nkable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"))\nDT::datatable(mtcars)\nlibrary(gt)\n#> Warning: package 'gt' was built under R version 4.3.1\n\ngt(mtcars, rownames_to_stub = T) %>% \n  tab_header(\n      title = \"Демонстрация таблицы\",\n      subtitle = \"построенной с помозью пакета gt\"\n    ) %>% \n  tab_source_note(\n    source_note = \"Встроенный набор данных mtcars\"\n  )"},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"опции-чанков","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"9.3.1.4 Опции чанков","text":"Итак, виньетки состоят из текстов и блоков кода. Блоки коды выделяются тремя апострафоми, далее идут фигурные скобки, буква r и далее вы можете перечислить внутри скобок опции чанков. Ниже перечислю самые частоиспользуемые из них:label – Название чанкаeval – Следует ли выполнять код чанкаecho - Следует ли отображать исходный код в выходном документеresults – Управляет отображением результатов выполнения кода: markup, asis, hold, hidewarning, error, message – Надо ли выводить в результате выполнения кода предупреждения, ошибки или сообщенияПодробное описание всех доступных опций можно найти в статье \"Chunk options package options\".","code":""},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"readme","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"9.3.2 README","text":"README – Файл направленный на новых пользователей вашего пакета. Он так же будет главной страницей сайта пакета, и репозитория пакета на GitHub.Файл README должен отвечать на следующие вопросы:Какую проблему решает ваш пакетКак использовать его функционалОбычно README состоит из следующих пунктов:Параграф, описывающий общее назначение пакета.Пример, показывающий, как использовать пакет для решения простой проблемы.Инструкции по установке с кодом, который можно скопировать и вставить в R.Обзор, описывающий основные компоненты пакета. Для более сложных пакетов это будет указывать на виньетки для более подробной информации. Это также хорошее место, чтобы описать, как ваш пакет вписывается в экосистему целевого домена.","code":""},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"рабочий-процесс-3","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"9.3.2.1 Рабочий процесс","text":"Для создания README файла используйте функцию usethis::use_readme_rmd().Используйте devtools::build_readme() для рендинга и просмотра вашего README.Повторяете итерации о тех пор, пока README не будет соответствовать вашим ожиданиям.","code":""},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"news","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"9.3.3 NEWS","text":"NEWS – Файл направленный на пользователей, которые уже используют ваш пакет. Данный файл содержит описание всех изменений в пакете.","code":""},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"рабочий-процесс-4","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"9.3.3.1 Рабочий процесс","text":"Наиболее удобным способом его создания является функция usethis::use_news_md().Перед выпуском новой версии пакета используйте функцию usethis::use_version().","code":""},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"оформление-news","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"9.3.3.2 Оформление NEWS","text":"Каждое изменение должно быть частью маркированного списка.Если у вас много изменений, возможно, вы захотите разбить их с помощью подзаголовков, ## Major changes, ## Bug fixes и т. д.","code":""},{"path":"виньетки-и-прочая-опциональная-документация-пакета.html","id":"тест-6","chapter":"Урок 9 Виньетки и прочая опциональная документация пакета","heading":"9.4 Тест","text":"facebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":""},{"path":"разработка-сайта-пакета-пакет-pkgdown.html","id":"разработка-сайта-пакета-пакет-pkgdown","chapter":"Урок 10 Разработка сайта пакета (пакет pkgdown)","heading":"Урок 10 Разработка сайта пакета (пакет pkgdown)","text":"К этому уроку мы уже изучили множество типов документации, которые можно добавить в ваш пакет, в этом уроке мы разберёмся с тем, как объединить всю разработанную ранее документацию и сформировать из неё сайт вашего пакета.Данный урок основан на следующих материалах: Глава \"Website\" книги \"R Packages (2e)\", под авторством Хедли Викхема и Дженни Брайан.Статья \"Customise site\" на официальном сайте пакета pkgdownREADME пакета hexSticker","code":""},{"path":"разработка-сайта-пакета-пакет-pkgdown.html","id":"видео-9","chapter":"Урок 10 Разработка сайта пакета (пакет pkgdown)","heading":"10.1 Видео","text":"","code":""},{"path":"разработка-сайта-пакета-пакет-pkgdown.html","id":"тайм-коды-9","chapter":"Урок 10 Разработка сайта пакета (пакет pkgdown)","heading":"10.1.1 Тайм коды","text":"00:00 Вступление\n01:13 Обзор рабочего процесса\n02:41 Настройка пакет для разработки сайта\n03:38 Запуск процесса создания сайта\n04:09 Обзор разделов сайта пакета\n05:21 Публикация сайта на GitHub, и настройка автоматической её пересборки при любом изменении пакета\n06:40 Разница между виньеткой и статьёй сайта\n07:42 Раздел reference, группировка и сортировка документации к функциям\n11:01 Раздел articles, группировка и сортировка списка статей сайта\n12:36 Управление навигационной панелью сайта\n15:11 Управление боковой панелью сайта\n17:50 Изменение темы сайта пакета\n19:05 Разработка логотипа пакета\n23:01 Как добавить счётчик Google Analytics на сайт пакета\n23:51 Заключение","code":""},{"path":"разработка-сайта-пакета-пакет-pkgdown.html","id":"презентация-9","chapter":"Урок 10 Разработка сайта пакета (пакет pkgdown)","heading":"10.2 Презентация","text":"","code":""},{"path":"разработка-сайта-пакета-пакет-pkgdown.html","id":"конспект-9","chapter":"Урок 10 Разработка сайта пакета (пакет pkgdown)","heading":"10.3 Конспект","text":"","code":""},{"path":"разработка-сайта-пакета-пакет-pkgdown.html","id":"рабочий-процесс-5","chapter":"Урок 10 Разработка сайта пакета (пакет pkgdown)","heading":"10.3.1 Рабочий процесс","text":"По гачалу может казаться, что создание сайта пакета весьма трудоёмкий процесс, но на самом деле создание первой версии пакета займёт у вас не более пяти минут. Рабочий процесс состоит из следующих 3 этапов:Настройка вашего пакета для создания сайта - usethis::use_pkgdown()\nСоздаёт файл конфигурации сайта _pkgdown.yml\nДобавляет различные шаблоны в .Rbuildignore, чтобы файлы и каталоги, специфичные для pkgdown, не включались в сборку вашего пакета.\nДобавляет docs, место назначения по умолчанию для отображаемого сайта, в .gitignore.\nСоздаёт файл конфигурации сайта _pkgdown.ymlДобавляет различные шаблоны в .Rbuildignore, чтобы файлы и каталоги, специфичные для pkgdown, не включались в сборку вашего пакета.Добавляет docs, место назначения по умолчанию для отображаемого сайта, в .gitignore.Функция pkgdown::build_site() запускает процесс создания сайтаОпубликуйте ваш сайт на GitHub командой usethis::use_pkgdown_github_pages():\nИнициализирует пустую ветку в вашем репозитории GitHub с именем gh-pages\nВключает GitHub Pages для вашего репозитория\nКопирует файл конфигурации для GitHub Action, для автоматической пересборки сайта при любом коммите\nДобавляет URL-адрес вашего сайта в DESCRIPTION и _pkgdown.yml.\nИнициализирует пустую ветку в вашем репозитории GitHub с именем gh-pagesВключает GitHub Pages для вашего репозиторияКопирует файл конфигурации для GitHub Action, для автоматической пересборки сайта при любом коммитеДобавляет URL-адрес вашего сайта в DESCRIPTION и _pkgdown.yml.Теперь у вашего пакета есть сайт, и при отправке любого коммита на GitHub он будет автоматически пересобираться.","code":""},{"path":"разработка-сайта-пакета-пакет-pkgdown.html","id":"разделы-сайта-по-умолчанию","chapter":"Урок 10 Разработка сайта пакета (пакет pkgdown)","heading":"10.3.2 Разделы сайта по умолчанию","text":"Теперь давайте разберёмся из каких компоненотов документации был сгенерирован наш сайт. По умолчанию он имеет следующие разделы:главная страница сайта была сгенерирована из файла READMEreference - раздел со списоком функций вашего пакета, и ссылками на их документациюarticles - со списком статей, сгенерированных из виньеток сайтаchangelog - сформированный из файла NEWSget started - данный раздел формируется из виньетки, название которой соответвует названию вашего пакета, т.е. pkg_name.Rmd. Если такой виньетки в вашем пакете нет, то раздел \"Get started\" не будет добавлен на навигационную панель.","code":""},{"path":"разработка-сайта-пакета-пакет-pkgdown.html","id":"файл-_pkgdown.yml","chapter":"Урок 10 Разработка сайта пакета (пакет pkgdown)","heading":"10.3.3 Файл _pkgdown.yml","text":"Файл _pkgdown.yml является основным кофигом вашего сайта, и именну с его помощью вы можете контролировать и изменять его внешний вид и структуру любого его элемента. Вся остальная часть урока будет посвящена его настройке. По умолчанию этот файл содержит всего 3 строки:","code":"url: https://selesnow.github.io/firstpackage/\ntemplate:\n  bootstrap: 5"},{"path":"разработка-сайта-пакета-пакет-pkgdown.html","id":"группировка-списка-документации-функций","chapter":"Урок 10 Разработка сайта пакета (пакет pkgdown)","heading":"10.3.4 Группировка списка документации функций","text":"По умолчанию все функции представленные в разделе reference упорядочены в алфавитном порядке, что далеко не всегда удобно. Но вы можете настроить группировку функций в отдельные разделы, и отсортировать как порядок этих разделов, так и список функций, входящих в каждый раздел. Для управления списком функций в разделе reference добавьте их описание в поле reference файла _pkgdown.yml, ниже пример из моего пакета rgoogleads:Т.е. поле reference включает описание каждого раздела функций, которое состоит из следующих компонентов:title - название разделаsubtitle - подзаголовокdesc – описание разделаcontents - список названий функций для включения в раздел","code":"reference:\n  - title: Main page\n    desc: >\n      rgoogleads documentation main page\n    contents:\n      - rgoogleads-package\n  - title: Authorization\n    desc: >\n      Managing authorization process\n    contents:\n      - gads_auth_configure\n      - gads_auth\n      - gads_developer_token\n      - gads_api_key\n      - gads_oauth_app\n      - gads_auth_cache_path\n      - gads_deauth\n      - gads_has_token\n      - gads_token\n      - gads_user\n  - title: Options\n    desc: >\n      Package options setters\n    contents:\n      - gads_set_customer_id\n      - gads_set_login_customer_id\n  - title: Accounts data\n    desc: >\n      Loading account hierarchy and metadata\n    contents:\n      - gads_get_accessible_customers\n      - gads_get_account_hierarchy\n  - title: Account objects\n    desc: >\n      Loading account objects list\n    contents:\n      - gads_get_campaigns\n      - gads_get_ad_groups\n      - gads_get_ads\n      - gads_get_keywords\n      - gads_get_ad_group_criterions\n  - title: Reporting\n    desc: >\n      Loading report data\n    contents:\n      - gads_get_metadata\n      - gads_get_fields\n      - gads_get_report\n  - title: Keywords Planing Data\n    desc: >\n      Loading Keyword Plan data\n    contents:\n      - gads_keyword_plan_historical_metrics\n      - gads_keyword_plan_forecast_timeseries\n      - gads_keyword_plan_forecast_metrics\n  - title: Reference data\n    desc: >\n      Loading dictionaries\n    contents:\n      - gads_get_geo_targets\n  - title: Helpers\n    desc: >\n      Helper functions\n    contents:\n      - gads_check_errors\n      - gads_customer\n      - gads_customer_id_from_env\n      - gads_customer_id_to_env\n      - gads_fix_names\n      - gads_last_request_ids"},{"path":"разработка-сайта-пакета-пакет-pkgdown.html","id":"организация-списка-статей","chapter":"Урок 10 Разработка сайта пакета (пакет pkgdown)","heading":"10.3.5 Организация списка статей","text":"Раздел articles состоит из статей, которые формируются из виньеток пакета. Вам не обязательно включать в сборку пакета абсолютно все статьи в виде виньеток. Виньетки вы добавляете функцией usethis::use_vignette(), но, если вы хотите добавить статью в раздел articles сайта пакета, но не планируюете включать её в сборку пакета, используйте функцию usethis::use_article(). В таком случае путь к этой статье будет добавлен в файл .Rbuildignore, и будет исключён из сборки пакета, а на сайте это будет обычная статья.Так же как и список функций, список статей на вашем сайте тоже можно группировать в разделы, и сортировать. За управление списком статей в файле _pkgdown.yml отвечает поле articles. Например, в пакете dplyr оно выглядит следующим образом:Каждый раздел статей содержит следующие дополнительные поля:title - название разделаdesc – описание разделаnavbar – пара слов для обозначения этого раздела на панели навигацииcontents - список названий статей для включения в разделВиньетки, которые не были перечислены в поле articles попадают в блок .","code":"articles:\n- title: Get started\n  navbar: ~\n  contents:\n  - dplyr\n  - grouping\n  - two-table\n  - base\n\n- title: Automate\n  navbar: Automation\n  contents:\n  - colwise\n  - rowwise\n  - programming\n\n- title: Other\n  contents:\n  - window-functions\n  - in-packages"},{"path":"разработка-сайта-пакета-пакет-pkgdown.html","id":"навигационная-панель","chapter":"Урок 10 Разработка сайта пакета (пакет pkgdown)","heading":"10.3.6 Навигационная панель","text":"Контролироваьт навигационную панель вашего сайта можно с помощью поля navbar вашего _pkgdown.yml. Для примера на сайте пакета rgoogleads она описана следующим образом:Т.е. навигационна панель описывается двумя компонентами:structure – общий макет навигационной панели, который позволяет редактировать правую и левую её частьсomponents – настройки отдельных компонентов, элементами menu могут быть:\nСсылка (text + href)\nЗаголовок (text)\nРазделитель (text: ——-)\nИконка (icon), используйте иконки с сайта fontawesome\nСсылка (text + href)Заголовок (text)Разделитель (text: ——-)Иконка (icon), используйте иконки с сайта fontawesome","code":"navbar:\n  structure:\n    left: [intro, reference, articles, tutorials, api_docs, news]\n    right: [telegram, youtube, github]\n  components:\n    tutorials:\n      text: Video Tutorials\n      href: https://www.youtube.com/playlist?list=PLD2LDq8edf4qprTxRcflDwV9IvStiChHi\n    api_docs:\n      text: Google Ads API\n      href: https://developers.google.com/google-ads/api/docs/start\n    youtube:\n      icon: fa-youtube\n      href: https://www.youtube.com/R4marketing/?sub_confirmation=1\n      aria-label: YouTube\n    telegram:\n      icon: fa-telegram\n      href: https://t.me/R4marketing\n      aria-label: Telegram"},{"path":"разработка-сайта-пакета-пакет-pkgdown.html","id":"боковая-панель","chapter":"Урок 10 Разработка сайта пакета (пакет pkgdown)","heading":"10.3.7 Боковая панель","text":"За боковую панель отвечает поле home.sidebar, вот небольшой пример её описания:links - автоматические ссылки, созданные из полей URL и ссылки прописанные вручную из полей: BugReports в DESCRIPTION и home.linkslicense – информация о лицензииcommunity – ссылки на ссылки на .github/CONTRIBUTING.md, .github/CODE_OF_CONDUCT.md и т. д.citation - ссылка на информацию о цитировании пакета.authors – авторы указанные в DESCRIPTIONdev - значки состояния разработкиtoc – оглавление файла README","code":"home:\n  links:\n    - text: Facebook\n      href: https://facebook.com/selesnow\n    - text: Telegram\n      href: https://t.me/R4marketing\n  sidebar:\n    structure: [links, authors]"},{"path":"разработка-сайта-пакета-пакет-pkgdown.html","id":"тема-сайта","chapter":"Урок 10 Разработка сайта пакета (пакет pkgdown)","heading":"10.3.8 Тема сайта","text":"Помимо того, что вы можете изменять любые элемента сайта, вы в целом можете изменять его цветовую схему. Для этого посмотрите галерею тем на сайте bootswatch. И укажите название нужной темы в поле template.bootswatch.","code":"url: https://selesnow.github.io/firstpackage/\ntemplate:\n  bootstrap: 5\n  bootswatch: solar"},{"path":"разработка-сайта-пакета-пакет-pkgdown.html","id":"логотип-пакета","chapter":"Урок 10 Разработка сайта пакета (пакет pkgdown)","heading":"10.3.9 Логотип пакета","text":"Для начала создайте шестиугольный логотип вашего пакета либо в любом графическом редакторе, либо с помощью пакета hexSticker. Ниже небольшой пример создания логотипа с помощью изображения по ссылке, или графика ggplot2:Функция sticker() имеет три основных аргумента:subplot - путь к файлу с изображением, или ссылка на изображение, или объект графикаpackage - название вашего пакетаfilename - файл в который будет сохранён стикерБольшая часть остальных аргументов отвечает за расположение жлементов стикера.После того как логотип создан используйте функцию usethis::use_logo():функция помещает копию файла изображения в соответствующем масштабе в man/figures/logo.pngДаст вам фргмент markdown разметки для добавления логотипа в README файлВключит логотип в ваш сайт","code":"\nlibrary(hexSticker)\n\n# из изображения\nimgurl <- 'https://freepngimg.com/download/cat/22193-3-adorable-cat.png'\n\nsticker(\n  imgurl,\n  package=\"firtspackage\",\n  p_size=10, p_y = 1.6,\n  s_x=0.9,\n  s_y=0.9,\n  s_width=.5,\n  filename=\"inst/figures/imgfile.png\"\n  )\n\n# из графика\nlibrary(ggplot2)\n\np <- ggplot(aes(x = mpg, y = wt), data = mtcars) + geom_point()\np <- p + theme_void() + theme_transparent()\nsticker(\n  p,\n  package=\"hexSticker\",\n  p_size=20,\n  s_x=1,\n  s_y=.75,\n  s_width=1.3,\n  s_height=1,\n  filename=\"inst/figures/ggplot2.png\"\n  )"},{"path":"разработка-сайта-пакета-пакет-pkgdown.html","id":"добавляем-счётчик-google-analytics","chapter":"Урок 10 Разработка сайта пакета (пакет pkgdown)","heading":"10.3.10 Добавляем счётчик Google Analytics","text":"Настроить отслеживание посещения сайта вашего пакета можно прописав в поле template.params.ganalytics идентификатор вашего аккаунта Google Analytics:","code":"template:\n  bootstrap: 5\n  params:\n    ganalytics: UA-114798296-1"},{"path":"разработка-сайта-пакета-пакет-pkgdown.html","id":"тест-7","chapter":"Урок 10 Разработка сайта пакета (пакет pkgdown)","heading":"10.4 Тест","text":"facebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":""},{"path":"публикация-в-cran.html","id":"публикация-в-cran","chapter":"Урок 11 Публикация в CRAN","heading":"Урок 11 Публикация в CRAN","text":"К этому моменту за 10 предыдущих уроков курса мы изучили все этапы процесса разработки собственного пакета, в этом уроке мы поговорим о том, как опубликовать ваш готовый пакет в основном репозитории хранения R пакетов - CRAN.Данный урок основан на главе \"Releasing CRAN\" книги \"R Packages (2e)\", под авторством Хедли Викхема и Дженни Брайан.","code":""},{"path":"публикация-в-cran.html","id":"видео-10","chapter":"Урок 11 Публикация в CRAN","heading":"11.1 Видео","text":"","code":""},{"path":"публикация-в-cran.html","id":"тайм-коды-10","chapter":"Урок 11 Публикация в CRAN","heading":"11.1.1 Тайм коды","text":"00:00 Вступление\n01:03 Настройка непрерывной интеграции для регулярной проверки вашего пакета на разных платформах с помощью GitHub Actions\n03:43 Создаём issue со списком действий по подготовке и отправке новой версии пакета на CRAN\n05:54 Действия при первой отправке пакета на CRAN\n07:43 Проверка полей Title и Description файла DESCRIPTION\n08:25 Дополнительные проверки и исправление ошибок\n16:54 Отправка пакета на CRAN\n21:27 Как проходит проверка вашего пакета на стороне CRAN\n22:56 Что делать в случае отказа на публикацию пакета\n24:27 Получаем письмо с результатами автопроверки CRAN\n24:50 Сообщение о том, что ваш пакет успешно прошел проверку и будет опубликован в CRAN\n25:14 Действия, которые необходимо выполнить после публикации пакета в CRAN\n28:22 Заключения","code":""},{"path":"публикация-в-cran.html","id":"презентация-10","chapter":"Урок 11 Публикация в CRAN","heading":"11.2 Презентация","text":"","code":""},{"path":"публикация-в-cran.html","id":"конспект-10","chapter":"Урок 11 Публикация в CRAN","heading":"11.3 Конспект","text":"","code":""},{"path":"публикация-в-cran.html","id":"рабочий-процесс-6","chapter":"Урок 11 Публикация в CRAN","heading":"11.3.1 Рабочий процесс","text":"На этом этапе весь функционал вашего пакета уже реализован, ну или как минимум его MVP версия. И вы готовы поделиться с широкой общественностью вашей разработкой опубликовав свой пакет на CRAN. Этот процесс состоит из следующих этапов:Создаём на GitHub тикет со списком всех необходимых действий для публикации пакета в CRANДополнительные проверки пакетаИсправление ошибокПовторение первых двух итераций, до тех пор пока проверки не будут содердить как минимум ниодной ошибки (Errors) и ниодного предупреждение (Warnings), так же вы должны максимально снизить количество уведомлений (Notes)Отправка пакета в CRANВ случае отказа, изучение ответа от команды CRAN и внесение в пакет необходимых изменений, далее начинать всё с пункта 1В случае успеха отправляем новую стабилную версию пакета на GitHub, и переключаем локальную версию пакета в режим разработкиДелимся нвостью о новом пакете, или о новой версии пакета в соц. сетяхТеперь давайте немного подробнее разберём все этапы.","code":""},{"path":"публикация-в-cran.html","id":"безпрерывная-проверка-пакета","chapter":"Урок 11 Публикация в CRAN","heading":"11.3.2 Безпрерывная проверка пакета","text":"В ходе курса я неоднократно говорил о том, что в процессе разработки пакета как можно чаще запускайте проверку с помощью функции devtools::check(), поскольку это поможет быстро узнать об ошибке, что в свою очередь сильно облегчит её исправление. Минус запуска команды devtools::check() заключается в том, что все проверки реализуются исключительно на вашей операционной системе, и с начтроенной вами средой. У пользователей вашего пакета вполне может быть другая ОС, и однозначно по другому будет настроена рабочая среда, поэтому в идеале проверки должны быть независимыми ни от операционной системы, ни тем более от её настроек и состояния рабочего окружение. Организовать безпрерывное тестирование на удалённых серверах, отдельно на Windows, Linux и MacOS можно настроив безпрерывную интеграцию с помощью сервиса GitHub Actions.Для этого откройте проект вашего пакета и запустите команду usethis::use_github_action(\"check-standard\"). После чего в папке .github/workflows будет создан новый yml файл для настройки GitHub Action, который будет запускаться на GithUb при каждом вашем коммите, и запускать полный процес проверки вашего пакета на всех платформах, на которых работает R.Сервис GitHub Actions мы с вами уже использовали в уроке по разработке сайта пакета. Тогда мы настраивали автоматический пересбор сайта после каждого коммита.","code":""},{"path":"публикация-в-cran.html","id":"создайте-тикет-со-списком-действий","chapter":"Урок 11 Публикация в CRAN","heading":"11.3.3 Создайте тикет со списком действий","text":"Теперь создайте на GitHub специальный тикет со списком действий, необходмых при публикации пакета на CRAN, делается это с помощью команды usethis::use_release_issue().Созданный тикет будет содержать примерно такой список:Данный список содержит описание всех действий, которые вам необходимо выполниьт, что бы ваш пакет был опубликован в CRAN. Далее мы разберём основные действия более подробно.","code":""},{"path":"публикация-в-cran.html","id":"действия-при-первой-публикации-пакета","chapter":"Урок 11 Публикация в CRAN","heading":"11.3.4 Действия при первой публикации пакета","text":"Если вы отправляете свой пакет на CRAN впервые, то для начала сделайте следующее:Создайте файл CRAN_COMMENTS.md с помощью функции usethis::use_cran_comments()Добавьте в пакет файл READMEДобавьте в пакет файл NEWSУбедитесь, что все экспортированные функции имеют @returns и @examplesУбедитесь в том, что в поле Authors@R: включен владелец авторских прав (роль «cph»)Проверьте корректносьт заполнения полей Title и Description:\nВ поле title каждое слово начинается с большой буквы и заголовок не заканчивается точкой\nВсе ссылки должны быть завёрнуты в знаки <http://site.com>\nНазвание сервисов должно быть завёрнуто в одинарные кавычки\nВ поле title каждое слово начинается с большой буквы и заголовок не заканчивается точкойВсе ссылки должны быть завёрнуты в знаки <http://site.com>Название сервисов должно быть завёрнуто в одинарные кавычкиПример заполнения полей Title и Description в моём пакете rgoogleads:","code":"Title: Loading Data from 'Google Ads API'\nDescription: Interface for loading data from 'Google Ads API', \n    see <https://developers.google.com/google-ads/api/docs/start>. \n    Package provide function for authorization and loading reports."},{"path":"публикация-в-cran.html","id":"дополнительные-проверки-перед-отправкой","chapter":"Урок 11 Публикация в CRAN","heading":"11.3.5 Дополнительные проверки перед отправкой","text":"Далее стоит выполнить несколько дополнительных проверок.Функция devtools::check(remote = TRUE, manual = TRUE) за счёт установленных значений аргументов remote и manual добавляет в процесс проверки некоторые дополнительные этапы, которые так же включены в проверке CRAN.Далее вам надо использовать функцию urlchecker::url_check() для проверки корректности всех ссылок, которые вы указывали в документации своего пакета.Следующим запускаете проверку функцией devtools::check_win_devel(), которая отправит ваш пакет на проверку на сервис win-builder CRAN. Результаты этой проверки вы получите на почту в течении 15-30 минут.Последняя рекомендуемая проверка - сервис Rhub. Для работы с ним используйте пакет rhub:Сначала вам необходимо валидировать ваш email, команда rhub::validate_email('ваш имейл') сгенерирует на вашу почту письмо с токеном, скопируйте его, и вставьте в консоль в ответ на запрос Token:.И командой rhub::check_for_cran() отправляете ваш пакет на проверку. Также, в течении примерно 15 минут вы получите на почту ряд писем, каждое письмо сожержит информацию о проверке на одной конкретной платформе, и выглядеть они будут примерно так:На уведомление checking CRAN incoming feasibility ... [8s/59s] WARNING Maintainer: ‘Alexey Seleznev <selesnow@gmail.com>’ можете не обращать внимание, это уведомление исключительно для команды CRAN, и не говорит о том. что в вашем пакете есть какие либо проблемы.Все вышеперечисленные проверки обязательно должны пройти успешно, т.е. результат не должен содержать ниодной ошибки и предупреждения (кроме того, о котором я написал выше), и желательно не сожержать уведомлений (NOTES).","code":"\nrhub::validate_email('ваш имейл')\nrhub::check_for_cran()"},{"path":"публикация-в-cran.html","id":"процесс-отправки-пакета","chapter":"Урок 11 Публикация в CRAN","heading":"11.3.6 Процесс отправки пакета","text":"Если ваш пакет успещно прошел все перечисленные в предыдущем пункте проверки - вы готовы к его публикации на CRAN. Теперь пришло время изменить версию пакета командой usethis::use_version(). Далее отправить пакет на CRAN одной из соедующих команд:devtools::submit_cran() - упрощённая отправкаdevtools::release() - повторно проводит вас по всему этапу подготовки пакета, задавая вопросыКаждая из этих функций в итоге отправляет пакет на CRAN, а уже сам CRAN отправляет вам на email письмо для валидации адреса. Откройте вашу почту и перейдите по ссылке указанной в письме. После чего вы будете перенаправлены на CRAN, где должны поставить несколько галочек, и подтвердить что выполнили все необходимые этапы подготовки вашего пакета перед его публикацией.Теперь ваш пакет находится в стадии проверки со стороны CRAN.","code":""},{"path":"публикация-в-cran.html","id":"проверка-пакета-на-стороне-cran","chapter":"Урок 11 Публикация в CRAN","heading":"11.3.7 Проверка пакета на стороне CRAN","text":"Схематически весь дальнейший процесс проверки вашего пакета выглядит так:Сначала пакет попадает на pretest, результаты этих автопроверок вы получите на почтуЕсли в ходе автопроверки в вашем пакете был хоть один ERROR или WARNING, то пакет автоматически отклоняетсяЕсли автопроверка была пройдена без ERRORS и WARNINGS:\nЕсли ваш пакет публикуется первый раз то он попадает на ручную проверку сотрудником CRAN\nЕсли ваш пакет публикуется повторно, и в ходе автопроверок был хоть один NOTES, то он попадает на ручную проверку сотрудником CRAN\nЕсли ваш пакет публикуется повторно, и в ходе автопроверок не было ниоднонго NOTES, то пакет автоматически уходит на публикацию в CRAN\nЕсли ваш пакет публикуется первый раз то он попадает на ручную проверку сотрудником CRANЕсли ваш пакет публикуется повторно, и в ходе автопроверок был хоть один NOTES, то он попадает на ручную проверку сотрудником CRANЕсли ваш пакет публикуется повторно, и в ходе автопроверок не было ниоднонго NOTES, то пакет автоматически уходит на публикацию в CRANПакет, который попал на ручную прверку далее проверяется сотрудником CRAN, и уже исходя из его субъективного мнения может быть отправлен на доработку или далее публикован в CRAN.Важно терпимо относится к полученному вами ответу и комментарию от сотрудника CRAN, даже если ваш пакет был отклонён. Внимательно почитай по какой именно причине его отклонили, внесите требуемые правки, переключите версию пакета, и начинайте всё с первого пункта. Опубликовать свой первый пакет в CRAN достаточно сложно, наберитесь терпения, и наверняка всё в итоге получится.","code":""},{"path":"публикация-в-cran.html","id":"ваш-пакет-опубликован-на-cran","chapter":"Урок 11 Публикация в CRAN","heading":"11.3.8 Ваш пакет опубликован на CRAN","text":"Наконец вы получили следующее письмо от команды CRANи ваш пакет публикуется на CRAN.Сделайте ещё несколько шагов:С помощью команды usethis::use_github_release() отправьте стабильную версию вашего пакета на GitHub.Командой usethis::use_dev_version() переключите локальную версию вашего пакета в режим разработки.Поделитесь с сообществом новостью о том, что ваш новый пакет опубликован на CRAN, или что его новая версия там опубликована.Вот мы с вами и прошлись весь путь разработки собственного пакета, подробно разабрав все его этапы.","code":""},{"path":"публикация-в-cran.html","id":"тест-8","chapter":"Урок 11 Публикация в CRAN","heading":"11.4 Тест","text":"facebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":""},{"path":"решение-заданий.html","id":"решение-заданий","chapter":"Решение заданий","heading":"Решение заданий","text":"","code":""},{"path":"решение-заданий.html","id":"урок-7-тестирование","chapter":"Решение заданий","heading":"Урок 7: Тестирование","text":"После того как клонируете пакет, откройте его и запустите команду usethis::use_testthat(3).Далее запустите команду usethis::use_test('str_plus'), и в открывшийся файл test-str_plus.R добавьте следующие тесты:Файл с тестами к функции R/str_plus.R:Далее запустите команду usethis::use_test('str_split'), и в открывшийся файл test-str_split.R добавьте следующие тесты:Файл с тестами к фунции R/str_split.RЗапустите команду devtools::test() для выполнения тестов.","code":"\ntest_that(\"check concat length\", {\n  expect_length(\"my\" %+% \"little\" %+% \"string\", 1)\n})\n\ntest_that(\"check concat class\", {\n  expect_type(\"my\" %+% \"little\" %+% \"string\", 'character')\n})\n\ntest_that(\"check concat error\", {\n  expect_error(\"my\" %+% \"little\" / 7, regexp = 'non-numeric argument to binary operator')\n})\ntest_that(\"check split value\", {\n  expect_equal('The-little-text' %/% \"-\", c('The', 'little', 'text'))\n})\n\ntest_that(\"check split length\", {\n  expect_length('The-little-text' %/% \"-\", 3)\n})"},{"path":"новости-курса.html","id":"новости-курса","chapter":"Новости курса","heading":"Новости курса","text":"","code":""},{"path":"новости-курса.html","id":"section","chapter":"Новости курса","heading":"2023-10-17","text":"Опубликован одиннадцатый урок - Публикация в CRAN.","code":""},{"path":"новости-курса.html","id":"section-1","chapter":"Новости курса","heading":"2023-10-10","text":"Опубликован десятый урок курса - Разработка сайта пакета (пакет pkgdown).","code":""},{"path":"новости-курса.html","id":"section-2","chapter":"Новости курса","heading":"2023-10-07","text":"В курс добавлено видео Вводное слово.","code":""},{"path":"новости-курса.html","id":"section-3","chapter":"Новости курса","heading":"2023-10-03","text":"Опубликован девятый урок курса Виньетки и прочая опциональная документация пакета","code":""},{"path":"новости-курса.html","id":"section-4","chapter":"Новости курса","heading":"2023-09-25","text":"Опубликован весьмой урок курса Написание документации к функциям пакета","code":""},{"path":"новости-курса.html","id":"section-5","chapter":"Новости курса","heading":"2023-09-19","text":"Опубликован седьмой урок курса Разработка юнит-тестов к функциям пакета (пакет testthat)Добавлена страница Решение заданий","code":""},{"path":"новости-курса.html","id":"section-6","chapter":"Новости курса","heading":"2023-09-12","text":"Опубликован шестой урок NAMESPACE - Зависимости пакета.","code":""},{"path":"новости-курса.html","id":"section-7","chapter":"Новости курса","heading":"2023-09-05","text":"Опубликован пятный урок DESCRIPTION - Метаданные пакета.","code":""},{"path":"новости-курса.html","id":"section-8","chapter":"Новости курса","heading":"2023-08-31","text":"В описание каждого урока добавлена информация о том, какой матриал лежит в его основе. Большая часть уроков курса основаны на книге \"R Packages (2e)\", под авторством Хедли Викхема и Дженни Брайан.","code":""},{"path":"новости-курса.html","id":"section-9","chapter":"Новости курса","heading":"2023-08-29","text":"Опубликован четвёртый урок курса Добавление данных в пакет","code":""},{"path":"новости-курса.html","id":"section-10","chapter":"Новости курса","heading":"2023-08-28","text":"В программу курса добавлен урок Разработка пакета обёртки для Google API (пакет gargle)\"\"","code":""},{"path":"новости-курса.html","id":"section-11","chapter":"Новости курса","heading":"2023-08-22","text":"Опубликован третий урок курса Рекомендации по организации R кода","code":""},{"path":"новости-курса.html","id":"section-12","chapter":"Новости курса","heading":"2023-08-16","text":"Доработана программа, урок по компонентам пакета был разбит на 2, организация кода в пакете и добавление данных в пакет","code":""},{"path":"новости-курса.html","id":"section-13","chapter":"Новости курса","heading":"2023-08-15","text":"Сформирована первая версия программы курсаОпубликован второй урок курса: Настройка системы и интеграция с GitHubНа страницы курса добавлены кнопки поделиться в социальных сетях и подписаться на telegram и youtube каналы","code":""},{"path":"новости-курса.html","id":"section-14","chapter":"Новости курса","heading":"2023-08-07","text":"Создан проект курсаВидео первого урока опубликовано на YouTubeСтраница первого урока добавлена в курс: Обзор рабочего процесса разработки пакетаКурс опубликован на selesnow.github.iofacebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":""}]
