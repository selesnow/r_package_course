[{"path":"index.html","id":"введение","chapter":"Введение","heading":"Введение","text":"","code":""},{"path":"index.html","id":"о-курсе","chapter":"Введение","heading":"О курсе","text":"Моё знакомство с языком R состоялось в 2016 году. На тот момент я планировал его использовать для сбора данных по API из различных рекламных платформ. Для части из этих платформ я нашел готовые решения в видео пакетов, но для некоторых, менее известных рекламных площадок готов пакетов не оказалось. И тогда я попробовал разобраться самостоятельно с тем, как устроены R пакеты. На тот момент я не нашел полноценного гайда, и создавал пакеты методом тыка, используя встроенный в базовую комплектацию R функционал, вроде функции package.skeleton(), далее я руками правил все .Rmd файлы, из которых генерируется докуметация к функциям, и вообще делал в ходе разработки пакетов очень много лишней работы.На данный момент в главном репозитории хранения R пакетов - CRAN уже опубликовано 14 разработанных мной пакетов, за годы разработки пакетов я уже набил довлльно много шишек, и ознакомился с замечательной книгой Хедли Викхема \"R Packages (2e)\", которая и легла в основу этого курса. , тем не менее данный курс не является полным повторением книги, некоторые главы мы рассматривать не будем, но и в ходе курса будут рассмотрены некоторые темы, которые Хедли не упоминал в своей книге.Разработка пакетов один из лучших способов повысить свои навыки написания кода на R, и углуюиться в его изучение. Данный курс поможет вам пошагово освоить процесс разработки собственных пакетов. К тому же таким образом вы сможете внести свой вклад в развитие языка поделившись своими наработками, упакованными в R пакет.Добро пожаловать на курс \"Разработка пакетов на языке R\", и успехов в его прохождении!","code":""},{"path":"index.html","id":"для-кого-этот-курс","chapter":"Введение","heading":"Для кого этот курс","text":"Данный курс я не могу рекомендовать новичкам. Заниматься разработкой пакетов лучше имея за плечами определённый опыт написания кода на R. Поэтому не стоит начинать изучения R с данного курса, ниже я дам небольшую подборку подготовительных курсов, изучив которые можно попробовать себя в разработке пакетов.","code":""},{"path":"index.html","id":"по-поводу-поддержки-обучающихся-на-данном-курса","chapter":"Введение","heading":"По поводу поддержки обучающихся на данном курса","text":"Важно! Поддержки учащихся на этом курсе со стороны автора нет. Я не занимаюсь частными консультациями, тем более не консультирую студентов бесплатных курсов. Поэтому не имеет никакого смысла писать мне в личку или на почту просьбы помочь с прохождением этого, или любого другого моего бесплатного курса. Если вы столкнулись с трудностями при прохождении курса и вам нужна помощь, то все вопросы можно адресовать в следующие telegram чаты:R (язык программирования)Горячая линия RОтдельного чата со студентами непосредственно этого курса не существует, но при желании вы самостоятельно можете его организовать, и я с радостью добавлю на него ссылку.К тому же, если у вас есть вопросы по одной из лекций курса, вы можете задавать его под видео лекции на YouTube, это приветствуется, и на такие комментарии я с радостью отвечу.Буду рад любой конструктивной критике, и предложениям по улучшению курса \"разработка пакетов на языке R\", направлять их можно мне на почту selesnow@gmail.com. Если вы хотите выразить благодарность мне за курс, то в конце раздела описано как это можно сделать.","code":""},{"path":"index.html","id":"об-авторе","chapter":"Введение","heading":"Об авторе","text":"Меня зовут Алексей Селезнёв, с 2008 года я являюсь практикующим аналитиком. На данный момент основной моей деятельностью является развитие отдела аналитики в агентстве интернет-маркетинга Netpeak.\nМною были разработаны такие R пакеты как: rgoogleads, rfacebookstat, timeperiodsR и некоторые другие. На данный момент написанные мной пакеты только с CRAN были установленны более 200 000 раз.Также я являюсь автором некоторых других курсов по R (ссылки на них приведу ниже), лектором академии Web Promo Experts и соавтором курса \"Веб-аналитика Pro\".Веду свой авторский Telegram и YouTube канал R4marketing. Буду рад видеть вас в рядах подписчиков.Периодически публикую статью на различных интернет медиа, зачастую это Хабр и Netpeak Journal.Неоднократно выступал на профильных конференциях по аналитике и интернет маркетингу, среди которых Матемаркетинг, GoAnalytics, Analyze, eCommerce, 8P и прочие.","code":""},{"path":"index.html","id":"другие-курсы-автора","chapter":"Введение","heading":"Другие курсы автора","text":"Как я уже писал выше, помимо курса \"Разработка пакетов на языке R\" у меня есть ряд других бесплатных курсов:Язык R для интернет маркетинга, для начинающих, требуется бесплатная регистрацияЯзык R для пользователей Excel, для начинающихВведение в dplyr 1.0.0, средней уровень сложностиЦиклы и функционалы в языке R, средней уровень сложностиРазработка telegram ботов на языке R, высокий уровень сложности","code":""},{"path":"index.html","id":"каналы-автора","chapter":"Введение","heading":"Каналы автора","text":"Если вы интересуетесь языком R, применяете его в работе, или планируете изучать, то думаю вам будут интересны мои каналы, о которых я писал выше. Буду рад видеть вас среди подписчиков:Telegram канал R4marketingYoutube канал R4marketing","code":""},{"path":"index.html","id":"программа-курса","chapter":"Введение","heading":"Программа курса","text":"В данный момент курс \"разработка пакетов на языке R\" назодится в активной стадии разработки, поэтому программа постоянно расширяется, следить за обновлениями курса можно на страницк Новости курса. Ниже представлена актуальная программа на текущий момент:Обзор рабочего процесса разработки пакетаНастройка системы и интеграция с GitHubРекомендации по организации R кодаДобавление данных в пакетDESCRIPTION - Метаданные пакетаNAMESPACE - Зависимости пакетаРазработка юнит-тестов к функциям пакета (пакет testthat)Написание документации к функциям пакетаВиньетка и прочая документация пакетаРазработка сайта пакета (пакет pkgdown)Публикация в CRANРазработка пакета обёртки над API (пакет httr2)Разработка пакета обёртки для Google API (пакет gargle)Как создать коллекцию пакетовДата обновления курса: 01.09.2023","code":""},{"path":"index.html","id":"благодарности-автору","chapter":"Введение","heading":"Благодарности автору","text":"Курс, и все сопутствующие материалы предоставляются бесплатно, но если у вас есть желание отблагодарить автора за этот видео курс вы можете перечислить любую произвольную сумму на этой странице.Так же вы можете поделиться ссылкой на курс у себя в соц сетях, за что я тоже буду вам благдарен!facebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":""},{"path":"обзор-рабочего-процесса-разработки-пакета.html","id":"обзор-рабочего-процесса-разработки-пакета","chapter":"Урок 1 Обзор рабочего процесса разработки пакета","heading":"Урок 1 Обзор рабочего процесса разработки пакета","text":"В этом уроке мы поверхностно разберём весь процесс разработки пакета.Если вы работаете на Windows предварительно устновите Rtools.Данный урок основан на главе \"Whole Game\" книги \"R Packages (2e)\", под авторством Хедли Викхема и Дженни Брайан.","code":""},{"path":"обзор-рабочего-процесса-разработки-пакета.html","id":"видео","chapter":"Урок 1 Обзор рабочего процесса разработки пакета","heading":"1.1 Видео","text":"","code":""},{"path":"обзор-рабочего-процесса-разработки-пакета.html","id":"тайм-коды","chapter":"Урок 1 Обзор рабочего процесса разработки пакета","heading":"1.1.1 Тайм коды","text":"00:00 Вступление\n00:43 Как создать проект пакета\n01:50 Структура проекта пакета\n02:47 Добавляем проекту контроль версий\n03:14 Как добавить функцию в свой пакет\n04:17 Как загрузить текущий пакет (load_all())\n05:05 Как запустить проверку пакета (check())\n05:56 Файл DESCRIPTION\n06:52 Добавляем лицензию пакету\n07:08 Добавляем документацию к функциям пакета\n09:47 Файл NAMESPACE\n10:10 Добавляем юнит тесты для функций пакета\n13:34 Как использовать в своём пакете функции из других пакетов\n16:46 Обзор всего рабочего процесса\n19:03 Заключение","code":""},{"path":"обзор-рабочего-процесса-разработки-пакета.html","id":"презентация","chapter":"Урок 1 Обзор рабочего процесса разработки пакета","heading":"1.2 Презентация","text":"","code":""},{"path":"обзор-рабочего-процесса-разработки-пакета.html","id":"конспект","chapter":"Урок 1 Обзор рабочего процесса разработки пакета","heading":"1.3 Конспект","text":"","code":""},{"path":"обзор-рабочего-процесса-разработки-пакета.html","id":"вспомогательные-пакеты","chapter":"Урок 1 Обзор рабочего процесса разработки пакета","heading":"1.3.1 Вспомогательные пакеты","text":"devtools - инструменты разработчика пакетаusethis - автоматизация настройки разрабатываемого пакетаtestthat - разработка юнит тестов к функциям пакетаroxygen2 - упрощённое написание документации к функциям пакета","code":""},{"path":"обзор-рабочего-процесса-разработки-пакета.html","id":"процесс-разработки-пакета","chapter":"Урок 1 Обзор рабочего процесса разработки пакета","heading":"1.3.2 Процесс разработки пакета","text":"Создаём проект пакета с помощью команды create_package()Включаем контроль версий с помощью функции use_git()Добавляем лицензию командой use_mit_licence()Добавляем в пакет функции с помощью команды use_r()Документируем созданные функции добавляя специализированиы комментарии сочетанием клавиш Ctrl+Alt+Shift+Rгенерируем файлы документации функций командой document()Для тестирования добавляем в файл DESCRIPTION пакет testthat командой use_testthat()Добавляем для каждой функции юнит тесты командой use_test()Запускаем тестирование функций командой test()Для использования функций из стороних пакетов добавляем их в блок Imports файлв DESCRIPTION командой use_package(), в коде используем импортированные функции с помощью package_name::function_name()Проверяем пакет командой check()","code":""},{"path":"обзор-рабочего-процесса-разработки-пакета.html","id":"тест","chapter":"Урок 1 Обзор рабочего процесса разработки пакета","heading":"1.4 Тест","text":"facebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":""},{"path":"настройка-системы-и-интеграция-с-github.html","id":"настройка-системы-и-интеграция-с-github","chapter":"Урок 2 Настройка системы и интеграция с GitHub","heading":"Урок 2 Настройка системы и интеграция с GitHub","text":"Данный урок посвящён настройке вашей операционной системы и среды для разработки пакетов. Мы установим всё необходимое программное обеспечение, зарегистрируем бесплатный аккаунт на GitHub и настроим интеграцию между RStudio и GitHub.Данный урок основан на главе \"System setup\" книги \"R Packages (2e)\", под авторством Хедли Викхема и Дженни Брайан. А так же \"usethis setup\", входящую в документацию пакета usethis.","code":""},{"path":"настройка-системы-и-интеграция-с-github.html","id":"видео-1","chapter":"Урок 2 Настройка системы и интеграция с GitHub","heading":"2.1 Видео","text":"","code":""},{"path":"настройка-системы-и-интеграция-с-github.html","id":"тайм-коды-1","chapter":"Урок 2 Настройка системы и интеграция с GitHub","heading":"2.1.1 Тайм коды","text":"00:00 Вступление\n00:50 Настройка дефолтных опций пакета usethis\n05:13 Установка утилиты rtools\n06:38 Регистрация на GitHub\n08:15 Установка Git\n09:53 Установка учётных данных в Git\n11:27 Создание персонального токена на GitHub\n15:04 Проверяем систему на готовность к компиляции пакетов\n15:40 Отправка пакета из RStudio на GitHub\n17:25 Обзор всего процесса настройки системы для разработки пакетов и интеграции RStudio с GitHub\n18:43 Заключение","code":""},{"path":"настройка-системы-и-интеграция-с-github.html","id":"презентация-1","chapter":"Урок 2 Настройка системы и интеграция с GitHub","heading":"2.2 Презентация","text":"","code":""},{"path":"настройка-системы-и-интеграция-с-github.html","id":"конспект-1","chapter":"Урок 2 Настройка системы и интеграция с GitHub","heading":"2.3 Конспект","text":"Для настройки системы и интеграции с GitHub скачайте и установите следующее программное обеспечение:Rtools - Специальная утилита для сборки пакетов на Windows (только если работаете на Windows).Git - система управления версиями с распределенной архитектурой.","code":""},{"path":"настройка-системы-и-интеграция-с-github.html","id":"настройка-дефорлтных-опций-пакета-usethis","chapter":"Урок 2 Настройка системы и интеграция с GitHub","heading":"2.3.1 Настройка дефорлтных опций пакета usethis","text":"Для удобства вы можете настроить некоторые опции пакета usethis по умолчанию, например есть смысл проставлять по умолчанию в файле DESCRIPTION вас как автора пакета.Некоторые опции usethis:usethis.description - именованный список полей DESCRIPTION по умолчанию для новых пакетов, созданных с помощью usethis::create_package()usethis.full_name – задаёт имя по умолчанию, которое будет использоваться например при создании файла лицензииusethis.quiet – запрещает usethis выводить сообщения в консольusethis.destdir - каталог по умолчанию для использования в create_from_github()и use_course()Наиболее простой способ задать опции - отредактироваьт глобальный файл .Rprofile, выполните команду usethis::edit_r_profile(), после чего в RStudio откроется .Rprofile, далее добавьте в него код определния нудных опций:Теперь при создании пакета с помощью команды usethis::create_package() файле DESCRIPTION автоматически будет заполняться поле с указанием автора пакета.","code":"\noptions(\n  usethis.description = list(\n    \"Authors@R\" = utils::person(\n      \"Alexey\", \"Seleznev\",\n      email = \"selesnow@gmail.com\",\n      role = c(\"aut\", \"cre\"),\n      comment = c(ORCID = \"0000-0003-0410-7385\")\n    )\n  ),\n  usethis.destdir = \"C:/Users/SAMSUNG/Documents\",\n  usethis.overwrite = TRUE\n)"},{"path":"настройка-системы-и-интеграция-с-github.html","id":"настройка-системы","chapter":"Урок 2 Настройка системы и интеграция с GitHub","heading":"2.3.2 Настройка системы","text":"Скачайте и установите Rtools, если работаете на WindowsСкачайте и установите GitПерезагрузите системуУстановите учётные данные для Git","code":"\nlibrary(usethis)\n\n# подключаем Git\nuse_git()\n\n# имя для Git вы можете задать любое, им будут подписываться коммиты\n# email должен быть связан с учётной записью GitHub\nuse_git_config(user.name = \"Your Name\", user.email = \"your@gmail.com\")\n\n# проверка настроек\ngit_sitrep()"},{"path":"настройка-системы-и-интеграция-с-github.html","id":"интеграция-rstudio-с-github","chapter":"Урок 2 Настройка системы и интеграция с GitHub","heading":"2.3.3 Интеграция RStudio с GitHub","text":"Зарегистрируйте бесплатный аккаунт на GithubСоздайте персональный токен на GitHubДобавьте созданный токен в хранилище учётных данныхОпубликуйте проект вашего пакета на GitHub","code":"\n# получаем токен GitHub\nusethis::create_github_token()\n\n# добавляем токен в хранилище учётных данных\ngitcreds::gitcreds_set()\n\n# пуьбликуем проект пакета\nusethis::use_github()"},{"path":"настройка-системы-и-интеграция-с-github.html","id":"задание","chapter":"Урок 2 Настройка системы и интеграция с GitHub","heading":"2.4 Задание","text":"В этом уроке вместо теста у нас будет задание:Устновите rtools (только если работаете на Windows)Устновите GitЗарегистрируйте бесплатный аккаунт на Github (если его у вас ещё нет)Настройте интеграцию RStudio с GitHubСоздайте проект будущего пакетаОпубликуйте его на Githubfacebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":""},{"path":"рекомендации-по-организации-r-кода.html","id":"рекомендации-по-организации-r-кода","chapter":"Урок 3 Рекомендации по организации R кода","heading":"Урок 3 Рекомендации по организации R кода","text":"В этом уроке мы разберёмся с базовыми рекомендациями по организации кода вашего пакета, а так же узнаем чем принципиально отличается разработка пакета от написания обычного R сценария.Данный урок основан на главе \"R code\" книги \"R Packages (2e)\", под авторством Хедли Викхема и Дженни Брайан.","code":""},{"path":"рекомендации-по-организации-r-кода.html","id":"видео-2","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.1 Видео","text":"","code":""},{"path":"рекомендации-по-организации-r-кода.html","id":"тайм-коды-2","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.1.1 Тайм коды","text":"00:00 Вступление\n00:44 Из каких компонентов состоит пакет\n01:07 Как организовать функции пакета в файлы\n03:55 Про функции library() и source() в коде пакет\n05:32 Не изменяйте настройки глобальной среды R: функция .exit() и пакет withr\n14:09 Как задать локальные опции пакета, функция .onLoad()\n17:10 Код пакета определённый вне функций\n18:20 Заключение","code":""},{"path":"рекомендации-по-организации-r-кода.html","id":"презентация-2","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.2 Презентация","text":"","code":""},{"path":"рекомендации-по-организации-r-кода.html","id":"конспект-2","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.3 Конспект","text":"","code":""},{"path":"рекомендации-по-организации-r-кода.html","id":"организация-функций-в-файлы","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.3.1 Организация функций в файлы","text":"По поводу организаций функций в файлы нет строгих правил, есть два крайних подхода:Поместить каждую функцию в отдельный R файлПоместить код всех функций в один R файлОба этих подхода далеки от лучших практик, и затрудняют навигацию по коду пакета, поэтому для организации функций придерживайтесь следубщих правил:Если у вас есть семейство функций поместите их в один R файлЕсли у вас есть функция и набор вспомогательных к ней функций, поместите основную функцию и её помощников в один R файлЕсли функция не имеет помощников, и не входит ни в какое семейство функций, поместите её отдельно в R файл","code":""},{"path":"рекомендации-по-организации-r-кода.html","id":"команды-library-и-source","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.3.2 Команды library() и source()","text":"Никогда не используйте в коде пакета команды library(), require() и source():library() и require() изменяют путь поиска, влияя на то, какие функции доступны из глобальной среды. Вместо этого вы должны использовать DESCRIPTION для указания требований вашего пакета. Это также гарантирует, что эти пакеты будут установлены при установке вашего пакета.source() изменяет текущую среду, вставляя результаты выполнения кода. Для использования добавленных функций в ваш пакет используйте load_all() или test().","code":""},{"path":"рекомендации-по-организации-r-кода.html","id":"пакет-не-должен-изменять-настройки-глобального-окружения-r","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.3.3 Пакет не должен изменять настройки глобального окружения R","text":"Фукнции вашего пакета не должны изменять глобальных настроек, т.е. опций, переменных среды, счётчика генерации случайных чисел, и т.д. глобальной среды R. Поэтому старайтесь избегать, или использовать с крайней осторожностью такие команды как:options()par()setwd()Sys.setenv()Sys.setlocale()set.seed()Если вам всё таки необходимо внутри функций вашего пакета переопределять состояние среды, делайте это так, что бы при выходе из функции все переопределённые опции возвращались к исходному значению. Сделать это можно с помощью:Базовой функции .exit()Функционала пакета withr","code":""},{"path":"рекомендации-по-организации-r-кода.html","id":"пример-неправильного-определения-опций-пакета","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.3.3.1 Пример неправильного определения опций пакета:","text":"Функция f1() в своём коде переопределяет значение опции test.opt, до запуска функции данная опция имела значение 10, функция, незаметно для её пользователя, изменила это значение на 15 в глобальной среде. Это может вызвать проблемы, если данная опция используется шде-то далее в вашем коде, при чём обнаружиь такую проблему зачастую довольно сложно.","code":"\n# Неправильная установка опций --------------------------------------------\n## определяем какую то опцию в рамках сеанса\noptions(test.opt = 10)\n## запрашиваем значение опции\ngetOption('test.opt')\n#> [1] 10\n\n# определяем функцию изменяющую значение опции\nf1 <- function(x) {\n\n  options(test.opt = x)\n  getOption('test.opt')\n\n}\n\n## запускаем функцию\nf1(15)\n#> [1] 15\n## работа функции изменила значение опции, определённое в глобальной среде\ngetOption('test.opt')\n#> [1] 15"},{"path":"рекомендации-по-организации-r-кода.html","id":"пример-локального-изменения-опция-с-помощью-функции-on.exit","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.3.3.2 Пример локального изменения опция с помощью функции on.exit():","text":"В функции f2() мы добавили конструкцию old <- options(test.opt = x), которая созраняет прежнее значение опции перед тем, как присвоить новое. Далее с помощью функции .exit(options(old)) мы говорим нашей фукнции вернуть исходное значение заданой внутри функции опции test.opt. Как видим, теперь функция не изменяет значение опции в глобальной среде, заданное изменение действует только внутри функции.","code":"\n# базовая конструкция on.exit() -------------------------------------------\n## возвращаем дефолтное значение опции\noptions(test.opt = 10)\n\n## пишем код функции, работающий с опцией локально\nf2 <- function(x) {\n\n  old <- options(test.opt = x)\n  on.exit(options(old))\n  getOption('test.opt')\n\n}\n\n# запускаем функцию\nf2(15)\n#> [1] 15\n# проверяем значение опции после её выполнения\ngetOption('test.opt')\n#> [1] 10"},{"path":"рекомендации-по-организации-r-кода.html","id":"пример-изменения-опции-с-помощью-функционала-пакета-withr","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.3.3.3 Пример изменения опции с помощью функционала пакета withr:","text":"Пакет withr предоставляет более гибкий функционал для локального изменения значений опций.\nПример изменения опций с помощью функции with_options():При использовании функций с префиксом with_*() область действия изменений внесённых в опции или переменные среды распространяется только на код, прописанный в качестве второго аргумента самой функций. Поэтому внутри функции f3() изначально значение опции test.opt равно 10, после внутри функции with_options() мы его меняем на 15, после выхода из функции with_options() опция test.opt опять имеет глобально определённое значение 10, не смотря на то, что мы ещё не вышли из основной функции f3().Пример изменения опций с помощью функции with_local():Функции с префиксом local_*() определяют изменения среды, которые действуют внутри вашей функции, т.е. так же как и базовая функция .exit().","code":"\n# установка опций с помощью withr -----------------------------------------\n## определяем какую то опцию в рамках сеанса\noptions(test.opt = 10)\n## запрашиваем значение опции\ngetOption('test.opt')\n#> [1] 10\n\n## with_*() - функции лучше всего подходят для выполнения небольших фрагментов кода с временно измененным состоянием.\nf3 <- function(x) {\n\n  print(getOption('test.opt'))\n\n  withr::with_options(\n    list(test.opt = x),\n    print(getOption('test.opt'))\n  )\n\n  print(getOption('test.opt'))\n\n}\n\n# запускаем функцию\nf3(15)\n#> [1] 10\n#> [1] 15\n#> [1] 10\n## запрашиваем значение опции\ngetOption('test.opt')\n#> [1] 10\n## local_*() - функции определяют значения опций, которые будут действоваьт до выхода из функции.\n\nf4 <- function(x) {\n\n  print(getOption('test.opt'))\n  withr::local_options(list(test.opt = x))\n  print(getOption('test.opt'))\n\n}\n\n# запускаем функцию\nf4(15)\n#> [1] 10\n#> [1] 15\n## запрашиваем значение опции\ngetOption('test.opt')\n#> [1] 10"},{"path":"рекомендации-по-организации-r-кода.html","id":"как-задать-локальные-опции-своего-пакета","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.3.4 Как задать локальные опции своего пакета","text":"Иногда вам может понадобиться определить внутренние опции, ищменяющие поведение вашего пакета. Код определния опций следует прописывать внутри специальной функции .onLoad(). Данная функция выполняется каждый раз при загрузке пакета в память, т.е. при выполнении команды library(package_name). Код определения функций пакета принято помещать в файл zzz.R, делается это для того, что бы данный фрагмент кода пакета выполнялся в последнюю очередь.Так же важно придерживаться описанного выше правила, не менять значения опций глобального окружения, поэтому название опций пакета следует задавать согласно шаблону package_name.option_name. Перед тем, как определить значение опций пакета убедитесь, что пользовал не установил их значения до подключения самого пакета, что бы не изменить их значения незаметно для конечного пользователя вашего пакета.Пример очень урезанного кода определения внутренних опций пакета dplyr:Что делает приведённый выше код:Изначально командой op <- options() мы считываем все опции определённые в глобальном окруженииДалее мы задаём список (package_name.op) опций нашего пакета, именуя опции согласно шаблону package_name.option_nameКоманда toset <- !(names(op.dplyr) %% names(op)) проверяет - небыли ли установлены глобально значения каких либо опций нашего пакетаЕсли хотя бы одна из опций пакета не имеет значений в глобальном окружении (((toset))) то устанавливаем для неопределнных опций дефолтные значения (options(op.dplyr[toset])).","code":"\n.onLoad <- function(libname, pkgname) {\n  op <- options()\n  op.dplyr <- list(\n    dplyr.show_progress = TRUE\n  )\n  toset <- !(names(op.dplyr) %in% names(op))\n  if (any(toset)) options(op.dplyr[toset])\n\n  invisible()\n}"},{"path":"рекомендации-по-организации-r-кода.html","id":"тест-1","chapter":"Урок 3 Рекомендации по организации R кода","heading":"3.4 Тест","text":"facebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":""},{"path":"добавление-данных-в-пакет.html","id":"добавление-данных-в-пакет","chapter":"Урок 4 Добавление данных в пакет","heading":"Урок 4 Добавление данных в пакет","text":"В этом уроке мы разберёмся с тем для чего вам может понадобиться добавить в ваш пакет помимо кода функций ещё и данные, и рассмотрим 5 способов это сделать.Данный урок основан на главе \"Data\" книги \"R Packages (2e)\", под авторством Хедли Викхема и Дженни Брайан.","code":""},{"path":"добавление-данных-в-пакет.html","id":"видео-3","chapter":"Урок 4 Добавление данных в пакет","heading":"4.1 Видео","text":"","code":""},{"path":"добавление-данных-в-пакет.html","id":"тайм-коды-3","chapter":"Урок 4 Добавление данных в пакет","heading":"4.1.1 Тайм коды","text":"00:00 Введение\n00:35 Зачем добавлять данные в пакет\n02:08 Экспортируемые данные\n05:20 Внутренние данные пакета\n07:57 Необработанные данные\n13:51 Состояние пакета (внутренняя среда пакета)\n16:30 Постоянные пользовательские данные\n18:30 Прочие каталоги пакета\n19:33 Заключение","code":""},{"path":"добавление-данных-в-пакет.html","id":"презентация-3","chapter":"Урок 4 Добавление данных в пакет","heading":"4.2 Презентация","text":"","code":""},{"path":"добавление-данных-в-пакет.html","id":"конспект-3","chapter":"Урок 4 Добавление данных в пакет","heading":"4.3 Конспект","text":"","code":""},{"path":"добавление-данных-в-пакет.html","id":"какие-типы-данных-можно-добавить-в-пакет","chapter":"Урок 4 Добавление данных в пакет","heading":"4.3.1 Какие типы данных можно добавить в пакет","text":"Есть 5 способов добавления данных в ваш пакет, в зависимости от того, как эти данные далее будут использоваться:Экспортируемые данныеВнутренние данныеНеобработанные данныеСреда пакетаПостоянные пользовательские данные","code":""},{"path":"добавление-данных-в-пакет.html","id":"экспортируемые-данные","chapter":"Урок 4 Добавление данных в пакет","heading":"4.3.2 Экспортируемые данные","text":"Это данные, которые экспорптируются при подключении пакета, и подразумевают их дальнейшее использование конечными пользователями вашего пакета. Зачастую в пакет добавляют несколько наборов данных, которые используются в примерах использования функционала пакета, иногда встречаются пакеты, которые состоят исключительно из данных.Экспортируемые данные хнятся в виде .rda файлов в специальном каталоге data/. Наиболее простой способ включить экспортируемые данные в ваш пакет предоставляет функция usethis::use_data().Функция usethis::use_data() выполняет следующее:Создаёт каталогdata/, если его ещё нетДобавляет в каталог data/ .rda файлыДобавляет блок LazyData: true в DESCRIPTION файлНе смотря на то, что у вас есть возможность созранить любе количество наборов данных в один .rda файл рекомендуется под каждый экспортируемый набор данных создавать отдельный файл в папке data/.","code":"\n# создаём набор данных\nboard_of_directors <- tibble::tibble(\n  id            = 1:5,\n  name          = c(\"Alex\", \"John\", \"Bill\", \"Stiv\", \"Michael\"),\n  position      = c(\"CEO\", \"CTO\", \"CMO\", \"CDO\", \"CFO\"),\n  department    = rep(\"Board of Directors\", 5),\n  year_of_birth = c(1984, 1971, 1987, 1980, 1978),\n  rate          = c(5000, 4200, 3500, 4500, 3500),\n  office        = c(\"New York\", \"New York\", \"Chicago\", \"Washington\", \"Washington\")\n)\n\n# сохраняем его в каталог data\nusethis::use_data(board_of_directors)"},{"path":"добавление-данных-в-пакет.html","id":"внутренние-данные","chapter":"Урок 4 Добавление данных в пакет","heading":"4.3.3 Внутренние данные","text":"Данные, которые используются искобчительно функциями вашего пакета, являются исключительно технической, а не функциональнйо частью вашего пакета, и для конечного пользователя эти данные недоступны. Соответвенно внутренние данные не экспортируются при подключения пакета. Такие данные хрантся в специальном файле sysdata.rda в каталоге R/, т.е. вместе с кодом функций пакета.Добавить в пакет внутренние данные можно той же функцией usethis::use_data(), но указав значение аргумента internal = TRUE.В отличае от экспортируемых данных, все внутренние наборы данных помещаются в один файл sysdata.rda, поэтому все их необходимо одновременно указать в функции usethis::use_data().","code":"\n# создаём наборы данных\nboard_of_directors <- tibble::tibble(\n  id            = 1:5,\n  name          = c(\"Alex\", \"John\", \"Bill\", \"Stiv\", \"Michael\"),\n  position      = c(\"CEO\", \"CTO\", \"CMO\", \"CDO\", \"CFO\"),\n  department    = rep(\"Board of Directors\", 5),\n  year_of_birth = c(1984, 1971, 1987, 1980, 1978),\n  rate          = c(5000, 4200, 3500, 4500, 3500),\n  office        = c(\"New York\", \"New York\", \"Chicago\", \"Washington\", \"Washington\")\n)\n\noffice_coef <- tibble::tibble(\n  office = c(\"New York\", \"Chicago\", \"Washington\"),\n  coef   = c(1.2, 0.85, 1.1)\n)\n\n# сохраняем его в файл R/sysdata.rda\nusethis::use_data(board_of_directors, office_coef, internal = T)"},{"path":"добавление-данных-в-пакет.html","id":"необработанные-данные","chapter":"Урок 4 Добавление данных в пакет","heading":"4.3.4 Необработанные данные","text":"Такие данные могут использоваться для предоставления тестовых данных, для примеров использования функций пакета. Например, в пакет readxl, предназначенный для чтения данных из Excel книг, включены несколько Excel книг, исключительно для того, что бы пользователи могли протестировать его работу, описанную в примерах к функциям пакета.Необработанные данные необходимо хранить в специальном каталоге по пути inst/extdata, т.е. создаёте каталог inst, и внутри него подкаталог extdata.Далее в эту папку добавляете файлы с данными.для обращения к добавленным необработанным данным необходимо использовать функцию system.file(), но тут есть один нюанс. Дело в том, что ваш пакет может иметь разные состояни. в момент разработки это просто проект, который может находится в любом месте на вашем жестком диске, а функция system.file() ищет файлы исключительно в уже установленных пакетах, и если вы её просто будете использовать в вашем пакете, она вернёт пустую строку, вместо пути к файлу с необработанными данными. Но, как вы помните команда load_all() имитирует процесс загрузки вашего разрабатываемого пакета в память. очень близко к тому, как это делает команда library() с уже установленными пакетами. Поэтому, для того, что бы команда system.file() успешно работала в момент разработки вашего пакета, вам всегда необходимо держать пакет в состоянии загруженном в память, т.е. до того, как вы будете тестировать ваши функции нажмите сочетание клавиш Ctrl + Shift + L.","code":"\ndir.create('inst/extdata', recursive = T)\n# Пример обращения к сырым данным пакета firstpackage\n# предварительно обязательно надо загрузить пакет в память через load_all()\nsystem.file('extdata', 'board_of_directors.csv', package = 'firstpackage')"},{"path":"добавление-данных-в-пакет.html","id":"среда-пакета","chapter":"Урок 4 Добавление данных в пакет","heading":"4.3.5 Среда пакета","text":"Данный приём используется если вам необходимо динамически изменять состояние вашего пакета. В таком случае вам необходимо создать внутри пакета отдельную среду, добавьте файл aaa.R в каталог R/, в котором создайте пустую среду, и добавльте в неё нужные объекты:Далее в случае необходимости обращения, или изменения значений созданных внутри среды объектов добавьте специальные функции:Код заимствован из книги \"R Packages 2e\", Hadley Wickham, глава Data, раздел Internal stateТакие данные могут динамически изменяться в ходе одного R сеанса, но при повторном сеансе будут стартовать со своих исходных значений.","code":"\nthe <- new.env(parent = emptyenv())\nthe$favorite_letters <- letters[1:3]\n#' Report my favorite letters\n#' @export\nmfl2 <- function() {\n  the$favorite_letters\n}\n\n#' Change my favorite letters\n#' @export\nset_mfl2 <- function(l = letters[24:26]) {\n  old <- the$favorite_letters\n  the$favorite_letters <- l\n  invisible(old)\n}"},{"path":"добавление-данных-в-пакет.html","id":"постоянные-пользовательские-данные","chapter":"Урок 4 Добавление данных в пакет","heading":"4.3.6 Постоянные пользовательские данные","text":"Иногда вам может понадобится хранить какие то данные, которые будут использоваться между различными R сеансами. Например, я в своих пакетах таким образом храню авторизационные данные пользователя, для того, что бы пользователям моих пакетов не требовалось в ходе каждой новой R сессии проходить авторизацию через браузер, они один раз проходят весь процесс авторизации, полученные данные кешируются на жестком диске конечного пользователя, и во всех следующих сеансах читаются из кеша, что поволяет избегать повторной пользовательской авторизации.Конечно данные, которые будут использоваться между различными R сессиями необходимо хранить локально. на жестком диске пользователя пакета. При этом обязательно необходимо соблюдать спецификацию каталогов принятую для вашей операционной системы, для определения директорий в которых вы будете хранить файлы вашего пакета используйте функцию tools::R_user_dir():tools::R_user_dir(\"pkg\", = \"data\") – хранение данныхtools::R_user_dir(\"pkg\", = \"config\") – хранение конфиговtools::R_user_dir(\"pkg\", = \"cache\") – хранение кешированных данныхНо, следует учитывать что функция tools::R_user_dir() появилась в R 4.0, если вашему пакету необходимо иметь совместимость с более старыми версиями R, то в качестве альтернативного варианта используйте функционал пакета rappdirs, о котором я отдельно рассказывал в видео уроке \"Работа с секретными данными в R\".","code":""},{"path":"добавление-данных-в-пакет.html","id":"тест-2","chapter":"Урок 4 Добавление данных в пакет","heading":"4.4 Тест","text":"facebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":""},{"path":"новости-курса.html","id":"новости-курса","chapter":"Новости курса","heading":"Новости курса","text":"","code":""},{"path":"новости-курса.html","id":"section","chapter":"Новости курса","heading":"2023-08-31","text":"В описание каждого урока добавлена информация о том, какой матриал лежит в его основе. Большая часть уроков курса основаны на книге \"R Packages (2e)\", под авторством Хедли Викхема и Дженни Брайан.","code":""},{"path":"новости-курса.html","id":"section-1","chapter":"Новости курса","heading":"2023-08-29","text":"Опубликован четвёртый урок курса Добавление данных в пакет","code":""},{"path":"новости-курса.html","id":"section-2","chapter":"Новости курса","heading":"2023-08-28","text":"В программу курса добавлен урок Разработка пакета обёртки для Google API (пакет gargle)\"\"","code":""},{"path":"новости-курса.html","id":"section-3","chapter":"Новости курса","heading":"2023-08-22","text":"Опубликован третий урок курса Рекомендации по организации R кода","code":""},{"path":"новости-курса.html","id":"section-4","chapter":"Новости курса","heading":"2023-08-16","text":"Доработана программа, урок по компонентам пакета был разбит на 2, организация кода в пакете и добавление данных в пакет","code":""},{"path":"новости-курса.html","id":"section-5","chapter":"Новости курса","heading":"2023-08-15","text":"Сформирована первая версия программы курсаОпубликован второй урок курса: Настройка системы и интеграция с GitHubНа страницы курса добавлены кнопки поделиться в социальных сетях и подписаться на telegram и youtube каналы","code":""},{"path":"новости-курса.html","id":"section-6","chapter":"Новости курса","heading":"2023-08-07","text":"Создан проект курсаВидео первого урока опубликовано на YouTubeСтраница первого урока добавлена в курс: Обзор рабочего процесса разработки пакетаКурс опубликован на selesnow.github.iofacebooklinkedintwitterwhatsappredditweiboinstagramtelegramtelegramyoutube","code":""}]
